* Code-and-Fix
Древняя и на первый взгляд максимально простая модель. Подходит малым командам разработчиков,
которые отлично понимаю, ЧТО и КАК они хотят получить. Не тратится время на документации, планирование
и митинги.

Суть - садимся и кодим. Потом проверяем работоспособность и снова кодим.

Проблема в том, что простота данной модели мнимая. Порой фиксы одной ошибки ломают всю систему и
может возникунть ситуация, когда всю работу придётся делать заново.

* Waterfall
Эдакое "Конструирование моста".
Ещё одна древняя, но всё ещё живая модель. Очень "жёсткая" модель. Есть точный план, есть ограниченный
бюджет, все этапы выполняются строго друг за другом.

Последовательность соблюдается крайне строго:{
    1: Изучаются требования,
    2: Проектируют продукт,
    3: Разрабатывают продукт,
    4: Продукт тестируют,
    5: Занимаются поддержкой продукта.
}

Вернуться к предыдущей ступени нельзя, исправить ошибки, допщенные на предыдущих этапах, очень
сложно и дорого.

Эта модель проявляет себя хорошо в ситуациях, когда мы разрабатываем продукт, очень похожий на
предыдущий. Теоретически хорошо подходит для госпроектов или стартапов, направленных на улучшение
уже имеющегося ПО.

Почему "мост"? Да потому, что довольно странной будет затея создать 1 пролёт моста, а затем думать
над тем, как нам строить следующий. При конструировании подобных строений должен быть заранее
утверждённый план, макет, прототип.

* V-модель
Очень схожа с каскадной (водопадной) моделью, но тестирование предусмотрено на ранних этапах.
При переходе на следующий этап разработки предусмотрен контроль всего того, что было сделано
на предыдущем. 

Все найденные ошибки исправляются, а затем наступает новая фаза работы над продуктом.

* Инкрементальная модель
Эдакая "мозайка": наш проект делится на части/компоненты. Каждый компонент
разрабатывается по очереди. Затем происходит финальная сборка продукта.

* Итеративная модель
Эдакая "матрёшка": сначала создаётся основа, базовая модель продукта, а затем каждую итерацию
происходит его улучшение, продукт обрастает новой функциональностью.

* Спиральная модель
Схожа с инкрементальной, но имеет отличительную особенность - детальную проработку рисков.
Спиральная модель позволяет вести критически важных и одновременно сложных проектов, где 
ошибка может привести к закрытию компании.

В принципе, это довольно неплохая модель для стартапов, ведь жизнь стартапа зависит от того,
понравится ли идея и сам продукт рынку.

4-е этапа каждой спирали:{
    1: Планирование,
    2: Анализ рисков,
    3: Конструирование,
    4: Оценка результатов.
}

* RAD-модель
Эдакий "Командный сбор мозайки":
RAD - Rapid Application Development. Разновидность инкрементальной модели, но с нотками гибкости,
присущей Agile моделям.

Заказчик привлекается к процессы максимально рано. Главное уксловие модели - проект обязательно
обязан иметь возможность разбиваться на небольшие части, которые ПАРАЛЛЕЛЬНО могут разрабатывать
НЕСКОЛЬКО КОМАНД.

* Agile
Гибкая модель разработки, по которой нынче работает большинство IT компаний.

После каждой итерации получаем результат, можем вносить изменения в первоначальную идею проекта.

Минусы такой модели - опасность того, что максимально полный проект никогда не выйдет на рынок.
Вы будете уусовершенствовать его до бесконечности, пока не кончится ваш бюджет.

# Agile Манифест:
{
    1. Люди и взаимодействие важнее процессов и инструментов
    2. Работающий продукт важнее исчерпывающей документации
    3. Сотрудничество с заказчиком важнее согласования условий контракта
    4. Готовность к изменениям важнее следования первоначальному плану

    То есть, не отрицая важности того, что справа, мы всё-таки больше ценим то, что слева.
}

* Kanban
Методология Agile.
Задачи должны выполняться точно в срок, нагрузки между командами - распределяться равномерно.

Каждая задача = карточка, добавляемая на физическую/ виртуальную доску задач.
Карточки и доски - неотъемлемая часть Kanban-а.
Все карточки изначально находятся в поле "Сделать". 
Исполнитель перемещает их в в колонку "В процессе".
Готовая задача помещается в колонку "Готово".

Но колонок может быть намного больше 3.
Разработана на производстве Toyota.

* Scrum
Одна из самых популярных методологий.
В отличие от Kanban имеет куда больше ивентов - пятиминутки, планирование спринтов и т.д.

Разработка подразделяется на спринты - заходы, длительность 2-4 недели и заканчиваются выпуском 
готовой части продукта.

SCRUM - "драка", "схватка за мяч". Термин пришёл из регби. Суть - победа за счёт совместных усилий
команды. В Scrum важно, чтобы команда состояла из профессионалов с высокой мотивацией и инициативой.

* XP - экстремальное программирование
Гибкая методология. "Экстремальное" - т.к. авторы утверждают, что взяли лучшие, на их взгляд,
практики гибкой разработки и усилили их до максимума.

XP применяется ТОЛЬКО для разработки ПО. 
Выделяются 4 процесса:
Кодирование - Тестирование - Дизайн - Слушание.

Плюсы: оперативность, высокое качество, командная работа.

Особенность XP - самая известная её практика - "Парное программирование".
Суть в том, что 2 разработчика одновременно работают кодом одной функции.
Один пишет - второй смотрит. Потом меняются местами.

Вторая особенность - "Сначала тесты, затем код". Причём тесты пишут сами программисты.

Третья особенность - "Коллективное владение кодом". Каждый программист имеет доступ к коду и 
может вносить в него изменения.

Забеги до нового релиза от 1 дня до месяца.
