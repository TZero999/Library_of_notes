1. REST API
REST API не используют хранение состояния и могут быть протестированы индивидуально
для каждого эндпоинта.

REST API обычно используют HTTP => применяются Postman, Curl или REST-assured (на Java).

Каждый эндпоинт тестируется с помощью различных HTTP-методов (GET, POST, PUT, DELETE и т.д.), и
проверки делаются в отношении кода состояния, времени ответа и тела ответа.

Шпаргалка для тестировщика:
{
- Тестируем эндпоинты:
Убедитесь, что каждый эндпоинт ведет себя так, как ожидается при правильных входных данных.

- Коды состояния HTTP:
Убедитесь, что в различных ситуациях возвращаются правильные коды состояния.

- Обработка ошибок:
Отправьте некорректные данные и проверьте, правильно ли API обрабатывает ошибки.

- Методы HTTP:
Проверьте поведение всех соответствующих методов HTTP (GET, POST, PUT, DELETE и т.д.).

- Валидация данных:
Убедитесь, что API правильно обрабатывает данные различных форматов, размеров и структур.

- Авторизация и аутентификация:
Убедитесь, что API правильно реализует и применяет меры безопасности.
}

2. SOAP API
SOAP API также не хранит состояние и может быть протестирован на основе операций.
Учитывая, что SOAP API используют XML, проверки обычно выполняются для xml ответов.
Для тестирования часто используются такие инструменты, как SoapUI. Можно проводить
"контрактное тестирование", поскольку SOAP API четко определены в WSDL.

Шпаргалки для тестировщика:
{
- WSDL-файл:
Проверяем WSDL-файл на наличие синтаксических ошибок и несоответствий.

- Запросы/ответы SOAP:
Убеждаемся, что запросы и ответы SOAP правильно отформатированы.

- Обработка ошибок:
API корректно возвращает ошибки для невалидных запросов.

- Валидация данных:
Проверьте способность API обрабатывать данные различных форматов, размеров и структур.

- Безопасность:
Убедитесь, что API правильно реализует стандарты WS-Security.
Про WS-Security можно почитать тут: http://k504.xai.edu.ua/html/ucheba/rss/RSS_Lekciya_9.pdf
}

3. WebSocket
Поскольку WebSockets обеспечивает полнодуплексную связь, тестирование усложняется.
Необходимо протестировать: 
1) Подключение;
2) Отключение;
3) Отправку сообщений;
4) Получение сообщений;
5) Сценарии ошибок.

Для тестирования можно использовать инструменты "Postman" и "WebSocket King". Также можно использовать 
библиотеки websocket-client (Python) и WebSocket-Node (Node.js).

Шпаргалка для тестировщика:
{
- Соединение:
Тестируем функциональность подключения и отключения WebSocket.

- Отправка/получение сообщений:
Сообщения правильно отправляются и принимаются в режиме реального времени.

- Обработка ошибок:
API корректно обрабатывает ошибки и неожиданные отключения.

- Одновременные соединения:
Проверяем поведение при нескольких одновременных соединениях.

- Формат данных:
Убеждаемся, что API правильно обрабатывает данные в ожидаемом формате.
}

4. API gRPC
gRPC использует HTTP/2. Значит нам необходим инструмент, поддерживающий этот протокол.
Буферы протокола (protobuf) также требуют специальной обработки.

В качестве Инструментов для тестирования можно использовать "grpccurl" и "ghz". Кроме того,
юнит-тестирование можно выполнить с помощью различных библиотек, специфичных для данного языка.

gRPC поддерживает четыре типа связи (унарная, серверная потоковая, клиентская потоковая и полнодуплексная).
Следовательно необходимо протестировать каждый из этих типов связи.

Шпаргалка для тестировщика:
{
- Валидация сообщений Protobuf: 
Убеждаемся, что сообщения Protobuf структурированы и отформатированы правильно.

- Унарные и потоковые вызовы: 
Тестируем унарные вызовы и все три типа потоковых вызовов (сервер, клиент, двунаправленные).

- Обработка ошибок: 
API корректно обрабатывает некорректные запросы или данные.

- Производительность: 
Тестируем производительность API, особенно в сценариях с высокой нагрузкой.

- Безопасность: 
Проверяем реализацию в API аутентификации и шифрования на основе сертификатов.
}

5. API GraphQL
В отличие от REST и SOAP, GraphQL основан не на сервисах, а на схеме данных.
Это требует другого подхода в тестировании. По сути, вы проверяете правильность загрузки данных в соответствии
с запросами и "мутациями" - запросами, позволяющими пользователям изменять данные на сервере.

Для тестирования можно используются "Postman", "Apollo Client Developer Tools" и даже браузерные IDE, например "GraphiQL"

Обычно тестируется избыток или недостаток данных (overfetching и underfetching), т.к. GraphQL позволяет
клиентам точно указывать в запросе, какие именно данные им нужны.

Шпаргалка для тестировщика:
{
- Валидация запросов:
Запросы возвращают правильные и ожидаемые данные.

- Тестирование мутаций:
Мутации правильно создают или изменяют данные.

- Обработка ошибок:
Убеждаемся, что API корректно возвращает ошибки при некорректных запросах/мутациях.

- Валидация данных: 
Тестируем, как API работает с данными различных форматов, размеров и структур.

- Избыточная и недостаточная выборка: 
Клиенты правильно указать нужные им данные, без избыточной или недостаточной выборки.
}