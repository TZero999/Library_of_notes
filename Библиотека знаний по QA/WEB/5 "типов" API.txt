Вспомним определение API:
API - это описание способов и правил взаимодействия одной компьютерной программы с другими.
Грубо говоря - это некий "контракт" или "протокол", в котором сказано как мы можем обращаться
к конкретному ПО и что оно может делать в ответ.

В спецификации API всегда указаны:
- Способы обращения к системе;
- Допустимые входные данные;
- Ожидаемые выходные данные.

Итак, существует по меньшей мере 5 типов самых популярных API:
1. Soap - протокол API
Протокол обмена структурированной информацией. Использует XML. Всегда в комплекте с 
идёт файл WSDL, являющийся описанием и инструкцией для конкретного API.

Может использовать многие web-протоколы. Серьёзный недостаток - зависимость от XML, большое
количество передаваемых данных, чёткая структурированность.

2. REST - архитектурный стиль
Архитектурный стиль разработки API. Построен на стандартном HTTP, обычно возвращает данные в
формате JSON (но поддерживает и другие). Не хранит "состояния", кэшируется.

Использует стандартные методы HTTP-протокола. Преимущества REST - простота и гибкость.
Серьёзный недостаток - при большом объёме данных необходимо выполнять несколько запросов. К
тому же можно столкнуться с ситуацией, когда спецификацию для конкретного REST довольно
сложно раздобыть.

3. WebSocket - протокол API
API, обеспечивающий постоянный полнодуплексный канал связи между клиентом и сервером.
Сохраняет соединение открытым, передавая данные в режиме настоящего времени. Используется в чатах,
онлайн-играх, системах отслеживания в реальном времени.

4. gRPC - фреймворк для создания API
Разработан командой Google. Работает по протоколам HTTP/2 для обмена данными и Protocol Buffers
(формат двоичных данных), как язык определения интерфейса. Идеальное решение для микросервисной
архитектуры. Обладают встроенным генератором спецификации. 

Из минусов - читаемость "Protobuf" намного хуже, чем у того же "JSON" и возможность реализовать
REST на основе протокола HTTP/2, что серьёзно нивелирует выигрыш в скорости у gRPC.

Поддерживает 4 режима взаимодействия:
1) Унарный - стандартный режим "запрос-ответ";
2) Потоковая передача к серверу;
3) Потоковая передача к клиенту;
4) Полнодуплексная потоковая передача.

5. GraphQL - язык запросов, синтаксис для создания API
Разработан компанией Facebook. Представляет собой язык запросов и рабочую среду для их выполнения.
REST создаёт необходимость делать запросы к разным эндпоинтам в случае необходимости получения
разнородной информации. GraphQL позволяет получить все нужные данные за 1 запрос.

Форма и размер ответа определяется пользователями. Это приводит к эффективной загрузке данных без
лишней информации. 

