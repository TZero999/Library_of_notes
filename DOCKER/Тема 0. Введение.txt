"Docker" - открытая платформа для разработки, доставки и эксплуатации приложений.

Docker позволяет быстрее выкладывать ваш код, быстрее его тестировать,
быстрее выкатывать готовое приложение.

Т.О. он уменьшает время между написанием кода и запуском кода.
Делает это Docker с помощью "платформы контейнерной виртуализации",

"Контейнер" - это своеобразная капсула, хранящая в себе код нашего приложения,
среду его запуска и все необходимые библиотеки.

* ОСОБЕННОСТИ КОНТЕЙНЕРОВ:

- Сравнительно короткий жизненный цикл:
Любой контейнер можно остановить, перезапустить или уничтожить, если это необходимо. Данные,
находящиеся в контейнере, тоже пропадут. Потому важные данные не хранят в контейнерах.

- Объём контейнеров измеряют в МБ:
в них упаковывают лишь те процессы и зависимости ОС, которые необходимы для выполнения кода. 
А легковесные контейнеры быстро запускаются и экономят место на диске.

- 1 контейнер = 1 процесс:
В таком случае отключение отдельного контейнера для отладки или обновления никак не
помешает нормальной работе всего приложения.

- Контейниризация = надёжная изоляция процессов:
Т.О. повышается уровень безопасности систем. Приложение внутри контейнера не имеет
доступа к основной ОС, потому не может негативно повлиять на неё.

- Контейниризация позволяет автоматизировать развёртывание ПО на хостах.

- Использование контейнеров позволяет перейти на микросервисную архитектуру:
Это ускоряет разработку новой функциональности, т.к. изменения в одном компоненте
не затрагивают остальную систему.

- Контейнеры считаются эффективнее виртуальных машин:
На одинаковом оборудовании можно запустить большое количество контейнеров и куда
меньше виртуальных машин. При использовании облачной инфраструктуры это заметный плюс.

* ОСНОВНЫЕ КОМПОНЕНТЫ DOCKER:

1. Dockerfile
Текстовый файл с последовательностью инструкций для создания образа Docker.
Файл создаётся по принципу < Одна строка - одна команда >

2. Daemon
Фоновая служба на хосте, отвечает за создание, запуск и уничтожение контейнеров.

3. Image
Неизменяемый файл - образ, из которого можно неограниченное число раз развернуть ПО.

4. Client
Утилита командной строки в Docker для управления Daemon-ом.
Любое взаимодействие с контейнером происходит через Daemon.

5. Container
Запущенное приложение, развёрнутое из образа Image.

6. Registry
Служба, выполняющая роль репозитория. Позволяет следить за версиями 
образов, создавать приватные репозитории.

7. Docker Hub
Публичный репозиторий, используемый в Docker по умолчанию.
Обеспечивает интеграцию с GitHub и BitBucket.

8. Docker Desktop
Приложение, позволяющее локально собирать, выполнять и тестировать контейнеры.
Работает на Windows и macOS.

9. Docker Volumes
Тома для постоянного хранения информации.
По умолчанию в Docker папки хранилищ создаются на хост-машине.
Но предусмотрена и возможность подключения удаленных хранилищ.

* КАК УСТРОЕН ОБРАЗ:
На базовый образ один за другим накладываются "слои", доступные только для чтения. 
Слои образуются после любых изменений в образе. Каждый новый слой - это актуальная
"версия" образа.

Получается, что финальный образ - это объединение всех слоёв в один. Все слои
сохраняются для возможности быстрого отката назад. Также это существенно ускоряет 
сборку из образа контейнеров.

Развёртывать образ можно любое количество раз на любом хосте.

* РАЗНИЦА КОНТЕЙНЕРА И ОБРАЗА:
Образ - набор доступных только для чтения слоёв.
Контейнер - это тот же образ, но с возможностью записи.

Контейнер создаётся из образа, в него записывается некая информация.
Когда контейнер уничтожается - все содержащиеся в нём данные стираются.
Затем, в случае необходимости, создаётся новый контейнер.

* DOCKER MANIFEST:
В любом образе Docker хранится файл "Docker manifest".
"Docker manifest" - это JSON-файл, содержащий информацию об образе:
1) Ссылки на каждый существующий слой;
2) Данные о размере этих слоёв;
3) Хеш;
4) Сведения о платформе, на которой он будет работать.

* 2 СПОСОБА СОЗДАНИЯ ОБРАЗА DOCKER:

1. Интерактивный
Простой способ, при котором разработчик сам изменяет среду окружения во время
запуска контейнера. 

Для этого после запуска Docker в сессии терминала необходимо запустить оболочку контейнера
(bash) командой "docker run image_name: tag_name". Имя тега можно не указывать, тогда
задействуется текущая, последняя версия образа.

2. С использованием Dockerfile
Вариант с Dockerfile сложнее. Выше было сказано, что каждому образу присваивается свой
"Dockerfile". Там же было сказано, что "Dockerfile" - это текстовый файл с последовательностью
инструкций для создания образа Docker.
 
После указания нужных команд в Dockerfile, следует с помощью файла .dockerignore исключить 
все файлы, которые не используются в сборке. Затем командой docker image build создаётся образ,
ему присваивается имя и тег.

* ОРКЕСТРАЦИЯ:
Зачастую наступает момент, когда контейнеров становится слишком много.
Исходя из этого возникают трудности с управлением ими.
Тогда на помощь приходят системы оркестрации.

1. Docker Swarm
Это - стандартная система оркестрации контейнеров, достаточная для решения базовых задач.
Позволяет быстро создать из нескольких хостов с контейнерами последовательный кластер Swarm.

Все кластерные хосты будут считаться единым контейнерным пространством.
В Docker-кластере должна быть как минимум один управляющий узел, "нода" - (manager).

2. Kubernetes
Платформа для автоматизации работы с контейнерами на Ubuntu, CentOS и других ОС Linux.
Позволяет централизованно группировать контейнеры, балансировать нагрузку, активировать
сервисы из сотен приложений одновременно.

Kubernetes предоставляет пользователям больше возможностей по сравнению со Swarm,
но и настраивать его при этом намного сложнее.