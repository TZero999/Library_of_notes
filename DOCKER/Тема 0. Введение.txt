"Docker" - открытая платформа для разработки, доставки и эксплуатации приложений.

Docker позволяет быстрее выкладывать ваш код, быстрее его тестировать,
быстрее выкатывать готовое приложение.

Т.О. он уменьшает время между написанием кода и запуском кода.
Делает это Docker с помощью "платформы контейнерной виртуализации",

"Контейнер" - это своеобразная капсула, хранящая в себе код нашего приложения,
среду его запуска и все необходимые библиотеки.

* ОСОБЕННОСТИ КОНТЕЙНЕРОВ:

- Сравнительно короткий жизненный цикл:
Любой контейнер можно остановить, перезапустить или уничтожить, если это необходимо. Данные,
находящиеся в контейнере, тоже пропадут. Потому важные данные не хранят в контейнерах.

- Объём контейнеров измеряют в МБ:
в них упаковывают лишь те процессы и зависимости ОС, которые необходимы для выполнения кода. 
А легковесные контейнеры быстро запускаются и экономят место на диске.

- 1 контейнер = 1 процесс:
В таком случае отключение отдельного контейнера для отладки или обновления никак не
помешает нормальной работе всего приложения.

- Контейниризация = надёжная изоляция процессов:
Т.О. повышается уровень безопасности систем. Приложение внутри контейнера не имеет
доступа к основной ОС, потому не может негативно повлиять на неё.

- Контейниризация позволяет автоматизировать развёртывание ПО на хостах.

- Использование контейнеров позволяет перейти на микросервисную архитектуру:
Это ускоряет разработку новой функциональности, т.к. изменения в одном компоненте
не затрагивают остальную систему.

- Контейнеры считаются эффективнее виртуальных машин:
На одинаковом оборудовании можно запустить большое количество контейнеров и куда
меньше виртуальных машин. При использовании облачной инфраструктуры это заметный плюс.

* ОСНОВНЫЕ КОМПОНЕНТЫ DOCKER:

1. Dockerfile
Текстовый файл с последовательностью инструкций для создания образа Docker.
Файл создаётся по принципу < Одна строка - одна команда >

2. Daemon
Фоновая служба на хосте, отвечает за создание, запуск и уничтожение контейнеров.

3. Image
Неизменяемый файл - образ, из которого можно неограниченное число раз развернуть ПО.

4. Client
Утилита командной строки в Docker для управления Daemon-ом.
Любое взаимодействие с контейнером происходит через Daemon.

5. Container
Запущенное приложение, развёрнутое из образа Image.

6. Registry
Служба, выполняющая роль репозитория. Позволяет следить за версиями 
образов, создавать приватные репозитории.

7. Docker Hub
Публичный репозиторий, используемый в Docker по умолчанию.
Обеспечивает интеграцию с GitHub и BitBucket.

8. Docker Desktop
Приложение, позволяющее локально собирать, выполнять и тестировать контейнеры.
Работает на Windows и macOS.

9. Docker Volumes
Тома для постоянного хранения информации.
По умолчанию в Docker папки хранилищ создаются на хост-машине.
Но предусмотрена и возможность подключения удаленных хранилищ.

* КАК УСТРОЕН ОБРАЗ: