- План работ:
Здесь всё стандартно и делится на 3 шага:
1) Изучаем требования и документацию;
2) Пишем тест-кейсы;
3) Тестируем.

Требований нет? Пишем/ выводим их сами.
Для тестирования API в качестве документации хорошо подходят WADL-ы и WSDL-ки.

Тестируем через SoapUI / PostMan. Причём в обеих программах можно тестировать как SOAP, так и REST.

- Требования и входные данные:
1) Параметры и атрибуты сервиса - можно посмотреть в WADL/ WSDL.
2) Образцы запросов - просим у разработчика.

- Какие тест-кейсы используем?
1) Smoke (по 1-му запросу на метод);
2) Critical Path (все "корректные"/"валидные" запросы);
3) Extended (все "некорректные"/"невалидные" запросы).

- Специфические тесты:
1) Пустые элементы - отправляем вместо обязательных параметров пустые строки;
2) Комментарии в JSON - реагирование системы на корректно оформленные комментарии.
3) Валидность ответов согласно схемам (WSDL или WADL) - соответствие ответов сервиса эталону, указанному в WSDL/ WADL/ образцах;
4) Проверки с дополнительными и недопустимыми значениями - отправляем запросы, которые не указаны в документации;
5) Типы данных в запросах - отправляем числа вместо строк, строки вместо чисел;
6) Дубликаты атрибутов и элементов - например, несколько раз отправляем атрибут password, смотрим на поведение системы;
7) Порядок атрибутов и элементов - если задан чёткий порядок элементов - нарушаем его;
8) Не соблюдаем длины строк и чисел;
9) Невалидные данные - например, нарушаем синтаксис JSON, XML и т.д.

- Что смотрим в ответах?
1) Статус код ответа сервера (200 - ОК и т.д.);
2) Тело ответа сервера;
3) Текст ошибки.

Тут всё сильно зависит от документации. Например, в документации сказано, что при определённой ошибке должен приходить определённый статус-код и текст ошибки.
Если при проверке приходит корректный статус-код, но текст ошибки отличается - заводим баг в систему.