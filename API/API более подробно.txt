- Веб-сервисы
Веб-сервисы = веб-службы.
Это программы, организовывающие взаимодействие между веб-сайтами.

Чуть более сложными словами: Веб-сервисы - это веб-ориентированная технология, которая позволяет программам взаимодействовать друг с другом 
путём передачи файлов в формата XML и JSON по специально разработанным правилам (протоколам).

    ВАЖНО!:
SOAP - Протокол!
REST - Архитектура!

- Протокол SOAP (Simple Object Access Protocol)
"Простой протокол доступа к объектам".
Этот протокол используется для обмена произвольными сообщениями в формате XML.
Форма написания XML и HTML крайне схожа.

- XSD и WSDL (XML Schema Definition и Web Services Description Language)

XSD - файл, в котором задаётся структура нашего XML документа (например, типы данных).
WSDL - файл, написанный на языке Web Services Description Language (и имеющий сооотвутствующее расширение).
В нём описываются сообщения, заголовки, события свойственные для нашего веб-сервиса - описывает структуру веб-сервиса.
Таким образом в нём чётко структурирована работа нашего сервиса.
WSDL файл обязателен для SOAP. 

Получается, что XSD описывает структуру XML документа, а WSDL - структуру веб-сервера.

Внутри WSDL есть:
<Message> - это сообщения, используемые веб-сервисом.
<Type> - информация о типах данных. Определяет типы отправляемых и принимаемых веб-сервисом данных.
<Porttype> - это список операций, которые могут быть выполнены с нашими сообщениями - прописывает, как будет сервис взаимодействоать с сообщениями.

Есть SOAP? Значит есть WSDL!

- Правила по написанию XML документов.
XML очень похож на HTML.
XML - eXtensible Markup Language - расширенный язык разметки.

Структура XML:
1) Открывающиё тег: <
2) Имя элемента: name
3) Аттрибуты: attribute
4) Окончание открывающего тега: >
5) Контент: любое наполнение, в зависимости от потребностей
6) Закрывающий тег с именем элемента: </name>

Основные особенности и отличия от HTML:
1) У XML ОДИН корневой элемент. Только один. Никаких "Head", "Body" и т.д.
2) ВСЕ теги имеют закрывающий тег.
3) Названия тегов регистрозависимы: Пример <Message> != <message>
4) Элементы не должны "пересекаться". 
    Корректный пример: <b> Content </b> <i><b> Content </b> Content </i>.
    Некорректный пример: <b> Content <i> Content </b> Content </i> - неправильная последовательность открывающих и закрывающих тегов.
5) Все значения элементов в кавычках "" или '': <person name = 'John' surname = "Doe"/>
6) В блоках контекста нельзя использовать символы <, >, & и кавычки. 
    Вместо них используем: &lt (<), &gt (>), &amp (&), &apos ('), &quot (").
7) Первая строка - объявление XML: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
Т.О. объявление XML - это отдельная строка, содержащая информацию о номере версии XML, указание на кодировку и параметр, и параметр для ссылкок на внешние документы.

- REST и RESTful-сервисы.
REST - Representational State Transfer - передача состояния о представлении - архитектурный стиль.
Он отличается от протокола тем, что нет жётских правил регламентирования.
Иногда есть файлы, описывающие структуру веб-сервиса - WADL, являющиеся аналогом файлов WSDL для SOAP.

REST - сама архитектура, правила передачи информации и т.д.
RESTful - характеристика веб-сервиса, который полностью удовлетворяет требования REST.

В REST-е принято использование JSON - Java Script Object Notation.
Гибкие файлы, занимают меньше места, удобнее в работе, чем XML.

Состоит JSON из объектов, выглядящих как пары ключ:значение из JS. Примеры: {"name":"Пётр","name":"Иван"} или {"postalcode":108810}.
Так же JSON может работать с массивами объектов: [{"postalcode":"108810"},{"postalcode":"108852"}].
Всё как в JavaScript.

- ОТЛИЧИЯ:
1) REST ПОДДЕРДЖИВАЕТ РАЗЛИЧНЫЕ ФОРМАТЫ, а не только JSON.
SOAP поддерживает обмен только XML-файлами.

2) REST работает только по протоколам HTTP и HTTPS. 
SOAP может работать с различными протоколами.

3) SOAP не может быть помещён кэш.
REST может быть закеширован.

4) REST - это архитектурный стиль. Более гибкий и менее зарегламентированный.
SOAP - протокол. У него много правил и требований.

- Что использовать на проектах?
Здесь самый главный вопрос в том, что нам важнее: простота или стандартизированность.
REST - протсота. Есть скорость, есть расширяемость, есть поддержка разных форматов.
SOAP - больше возможностей по безопасности и "больше возможностей качественного тестирования" благодаря наличию WSDL-файлов.
Также SOAP более ресурсоёмкий, медленнее REST. Разработка с SOAP дольше.

При работе с REST у вас должен быть примеры запросов. Желательно иметь и желаемые ответы сервиса на данные конкретные запросы.
Если такого нет - жизнь усложняется.
Но отсутствие документации - прямой повод обратиться к разработчику/ заказчику для уточнения правил работы.