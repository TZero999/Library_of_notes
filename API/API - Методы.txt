- Методы
Метод - тип HTTP запроса, указывающий серверу на действие, которое мы производим с веб-сервисом.
4 основных метода:
* GET - Read (R)
* POST - Create (C, U, D)
* PUT - Update (C, U)
* DELETE - Delete (D)

GET - запрос информации с сервера
POST - добавление информации на сервер (добавление файлов, отправка логина/ пароля, отправка комментария)
PUT - замена информации на сервере
DELETE - удаление информации с сервера.

ОДНАКО:
POST может служить для замены и удаления информации, а PUT - для удаления информации.
Всё зависит от того, как разработчики настроили работу сервера. Зачастую разработчики вовсе добавляют свои "кастомные" методы.

- CRUD
Методы отвечают за CRUD операции.
CRUD: Create Read Update Delete.

Концепция CRUD хорошо вписывается в тестирование и потому распространена в нём.
Предположим, при тестировании ПО у вас несколько пользователей:
1) Обычный пользователь - может только читать;
2) Модератор - может изменять информацию в системе;
3) Суперпользователь - обладает способностью создавать, читать и изменять информацию в системе;
4) Администратор - все доступные методы в системе.

- Частый вопрос на собеседовании: чем отличаются методы GET и POST
GET очень легко обнаружить и понять, что это GET. 
1) GET - это наша адресная строка. В адресной строке могут содерждаться параметры, уточняющие искомую нами информацию.
2) GET ограничен длиной адресной строки (всегда хороший и нужный TC).
3) Данные из GET-запросов попадают в кэш - кэшируются.
4) GET можно сохранить в закладку в браузере. То бишь сохраняя закладку мы, на самом деле, сохраняем GET-запрос. 
5) У GET нет тела запроса - он там лишний => GET не имеет полезной нагрузки.

POST - всегда имеет "полезную нагрузку"
1) В теле POST-запроса указывается текст, музыка, код - это и есть "полезная нагрузка"

#------------------------------------------------------------------------------------------------------------------------------------------------------------
Дополнительная информация
#------------------------------------------------------------------------------------------------------------------------------------------------------------

- Идемпонентность запросов
Идемпонентность - это свойство метода при повторном его применении давать ТОТ ЖЕ РЕЗУЛЬТАТ, что и в первый раз.
Есть ещё определение для информатики: идемпонентная операция - это действие, многократное повторение которого эквивалентно однакратному.
Идемпонентность позволяет корректно кэшировать ответы и снижать нагрузку на сеть.
ИМПОДЕНТНЫЙ метод != БЕЗОПАСНЫЙ метод!
Примеры имподентных запросов: PUT, DELETE.

- Безопасность запросов
Метод HTTP является безопасным, если он НЕ МЕНЯЕТ СОСТОЯНИЕ сервера.
Другими словами безопасные методы обладают доступом только к прочтению информации - "Read-only".
Примеры: GET, HEAD, OPTIONS.
ВСЕ БЕЗОПАСНЫЕ запросы одновременно являются и ИМПОДЕНТНЫМИ.

Практически порой вышеперечисленные запросы меняют статус сервера - например, сервер сохраняет некую статистику.
Что действительно СУЩЕСТВЕННО для БЕЗОПАСНЫХ методов - это то, что сами п осебе они не запрашивают этих изменений,
а, следовательно, не создают дополнительной нагрузки на сервер.

- Метод HEAD:
Довольно простой метод. Он аналогичен GET. HEAD возвращает только заголовок сервера, тела ответа нет.
Служит для проверки существования ресурса.

- Метод OPTIONS:
Метод OPTIONS обращается к серверу и позволяет нам получить параметры ресурса/сервера в заголовке ответа.
Сам ресурс при этом никак не затрагивается.

Ещё раз: OPTIONS возвращает параметры сервера в заголовке. Список этих параметров может быть совершенно разным.
Обычно заголовок именуется "Allow" и содержит список и описание методов, доступных для севрера.
Загрузка сервера при этом не инициируется, поэтому этот HTTP-запрос "легче", чем HEAD.

- Метод PATCH:
Метод PUT нужен для замены или создания ресурса по заданному URL.
Но PUT НЕ ПОЗВОЛЯЕТ ЧАСТИЧНО обновить ресурс.
Таким образом чтобы частично заменять ресурс приходится что-то придумывать и выделять "кусок" ресурса в новый ресурс.

Метод PATCH - не имподентный, не безопасный. Он позволяет производить как полное, так и частичное обновление ресурса,
возможно с побочными эффектами для смежного ресурса.

Неимподентность PATCH может привести к повреждениям ресурса при поступлении двух однеовременных PATCH-запросов, к одному и тому же ресурсу.
Хотя метод PATCH можно сделать имподентным, сформировав его особенным образом. Этоможет спасти от коллизий двух однеовременных запросов к одному ресурсу.