Выгоднее в плане производительности преобразовать и изменять данные на серверах БД, нежели в клиентском приложении.

Вычисляемые поля позволяют изменять формат данных (строчные/ прописные буквы),
вычислять числовые данные (суммировать, находить среднее арифметическое),
объединять данные нескольких полей в одно и т.д.

- Конкатенация полей:
"Конкатенация полей" - это процесс комбинирования (присоединением друг к другу) полей для получения одного поля.

"Какой знак осуществляет конкатенацию?"
В MS Access и SQL Server используем +;
В DB2, Oracle,PostgreSQL, SQLite и OpnOffice Base используем ||;
MySQL и MariaDB используют специальную функцию Concat.

Синтаксис (Для большинства БД):
SELECT vend_name + ' (' + vend_country + ') '
FROM Vendors
ORDER BY vend_name;
# Bear Emporium (USA)

Синтаксис с использованием ||:
SELECT vend_name || ' (' || vend_country || ') '
FROM Vendors
ORDER BY vend_name;
# Bear Emporium (USA)
# Или же Bear Emporium                (USA                )

"Дополнение пробелами и функции TRIM":
Если БД дополняет поля пробелами (как это делает PostgreSQL), стоит использовать функции отсечения пробелов.

Пример:
SELECT RTRIM(vend_name) || ' (' || RTRIM (vend_country) || ') ' # Теперь точно получим Bear Emporium (USA)

Функции TRIM() отбрасывают все пробелы, обрезая строку слева и справа;
RTRIM() - отрезает пробелы справа;
LTRIM() - отрезает пробелы слева.

- Псевдонимы. AS
Если используем конкатенацию получим столбец без названия.
А к столбцу без названия в клиентском приложении обратиться будет невозможно.

Поэтому лучшим решением является использование псевдонима для вычисляемого поля.

"Синтаксис:"
SELECT RTRIM(vend_name) || ' (' || RTRIM (vend_country) || ') ' AS vend_title

Кючевое слово AS часто является НЕОБЯЗАТЕЛЬНЫМ, но его применение - общепринятая практика.

AS задаётся сразу же после SELECT. Правильный синтаксис выглядит так:
SELECT AVG (Radius) AS AverageRadius FROM Planets

"Имена псевдонимов:"
Не стоит использовать имена из нескольких слов. 
Технически это возможно с помощью скобок: AS 'Average Radius', но
лучше не стоит этого делать - это может создать уйму проблем для клиентского приложения.

Кстати, "Псевдонимы" = "Производные столбцы".

- Математические вычисления
Один из способов использования вычисляемых полей - выполнение математических функций.

Пример:
SELECT prod_id, quantity, item_price,
quantity * item_price AS Expanden_Price # Добавит новое поле, данные для него будут получены при выполнении умножения
FROM OrderItems
WHERE order_num = 20008;

"Математические операторы":
В SQL поддерживаются базовые математические операторы (Сложение/ Вычитание/ Умножение/ Деление).

- Функции обработки данных

Использование функций в SQL зачастую вызывает проблемы.
Дело в том, что разные СУБД по-разному называют функции, имеют разные дополнительные функции и т.д.

Примеры:
1) Выбор части строки: 
MID() в Access;
SUBSTR() в DB2, PostgreSQL, SQLite, Oracle;
SUBSTRING() в MariaDB, MySQL, SQL Server.

2) Преобразование типа данных:
В Access и Oracle для этого есть несколько функций, по 1 на каждый тип;
CAST() в DB2 и PostgreSQL;
CONVERT() в MariaDB, MySQL и SQL Server.

3) Получение текущей даты:
NOW() в Access;
CURENT_DATE() в DB2 и PostgreSQL;
CURDATE() в MariaDB и MySQL;
SYSDATE() в Oracle;
GETDATE() в SQL Server;
DATE() в SQLite.

"Переносимый код" - код, который может работать в разных системах.
Как видно из списка выше, код в котором используются функции, не будет являться переносимым.

- Типы функций:

1) Текстовые - для обработки текстовых строк (отсечение пробелов, преобразование регистров);
2) Числовые - для выполнения математических операций (возведение в степень, извлечение корня);
3) Функции даты и времени - для обработки компонентов дат (определение разницы между датами);
4) Системные функции - возврат специфической информации (сведения об учётной записи пользователя).

- Текстовые функции:
LEFT() - возвращает символы из левой части строки;
LENGTH()/ DATALENGTH()/ LEN() - возвращает длину строки;
LOWER()/ LCASE() - преобразует строку в нижний регистр;
LTRIM() - Удаляет пробелы в левой части строки;
RIGHT() - возвращает символы из правой части строки;
RTRIM() - удаляет пробелы из правой части строки;
SOUNDEX() - возвращает значение SOUNDEX строки;
UPPER()/ UCASE() - преобразует строку в верхний регистр.

SOUNDEX - алгоритм, преобразующий строку в буквенно-цифровой шаблон, описывающий
фонетическое представление данного текста.
Проще говоря - позволяет искать созвучные слова и фразы.

- Функции для работы с датой/ временем:
Формат, в котором в ДБ хранятся значения даты и времени редко можно использовать в клиентском ПО.
В результате такие функции востребованы и являются очень важными для работы с реальной БД.

Пример (Ищем все заказы, сделанные в 2012 году):
"ДЛЯ SQL SERVER"
SELECT order_num
FROM orders
WHERE DATEPART (yy, order_date) = 2012;

А вот такой же запрос для "PostgreSQL":
SELECT order_num
FROM orders
WHERE DATE_PART ('year', order_date) = 2012;

В "Oracle" всё сложнее. Там приходится использовать функции для преобразования типов данных.
Вот пример из "Oracle":
SELECT order_num
FROM orders
WHERE order_date BETWEEN to_date ('01-01-2012') AND to_date ('12-31-2012');

- Функции для работы с числами:
ABS() - модуль числа;
COS() - косинус заданного угла;
EXP() - экспонента заданного числа;
PI() - число Пи;
SIN() - синус заданного угла;
SQRT() - квадратный корень заданного числа;
TAN() - тангенс заданного угла.

