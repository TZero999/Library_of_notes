- Итоговые функции
Итоговые функции помогают подвести итоги вычисления не отображая исходных данных.

Такие функции позволяют подсчитывать чсило строк в таблицах, определять сумму по набору строк,
искать наибольшее/ наименьшее и среднее значения в столбцах таблицы.

Большинство данных функций поддерживаются во все популярных СУБД.

"Итоговые функции в SQL":
AVG() - среднее значение по столбцу;
COUNT() - число строк столбце;
MAX() - наибольшее значение в столбце;
MIN() - наименьшее значение в столбце;
SUM() - сумма значений столбца.

Функцию AVG() можно использовать только для вычисления среднего значения КОНКРЕТНОГО
ЧИСЛОВОГО СТОЛБЦА. Имя этого столбца должно быть указано в качестве аргумента функции.
Чтобы найти среднее значение ПО НЕСКОЛЬКИМ СТОЛБЦАМ - надо вызвать функцию AVG() НЕСКОЛЬКО РАЗ!

Строки со значениями NULL игнорируются функциями AVG(), COUNT(), MAX(), MIN(), SUM().
НО не игнорируются COUNT(*)

"MAX() и MIN() с нечисловыми данными":
Данные функции можно использовать для поиска значений, дат, даже текстовых столбцов.
При работе с текстом данные функции возвращают строку, которая была бы последней/первой,
если бы данные были отсортированы по этому столбцу.

- Итоговые функции для уникальных значений

Все итоговые функции могут быть использованы двумя способами:
1) Вычислять значения по всем строкам (Аргумент ALL, активен по умолчанию);
2) Для выполнения вычислений по уникальным значениям (аргумент DISTINCT);

# MS Access не поддерживает DISTINCT. Для неё необходимо использовать подзапрос с COUNT(*).

"Предупреждение:"
Не используйте COUNT(*) и DISTINCT в одном запросе. 
COUNT() можно будет использовать только с указанием имени столбца в качестве аргумента.

"Совет:"
DISTINCT можно не использовать с MIN() и MAX().

"Примечание:"
Помимо DISTINCT и ALL есть ещё TOP и TOPPERCENT, поддерживающиеся НЕ ВСЕМИ СУБД.

- Комбинирование итоговых функций

Пример:
SELECT COUNT(*) AS num_items,
       MIN (prod_price) AS price_min,
       MAX (prod_price) AS price_max,
       AVG (prod_price) AS price_avg,
FROM products;

- ГРУППИРОВКА ДАННЫХ:

Группы создаются с помощью предложения GROUP BY инструкции SELECT.

Пример синтаксиса:
SELECT vend_id, COUNT(*) AS num_prods
FROM products
GROUP BY vend_id;

"Правила применения GROUP BY":
1) В GROUP BY можно указывать произвольное число столбцов.
Это позволяет вкладывать группы одна в другую;
2) Если в GROUP BY используются вложенные группы - данные подытоживаются.
для последней указанной группы - то бишь иы не сможем получить данные для каждого столбца;
3) ЕСЛИ столбец указан в GROUP BY - он ОБЯЗАН быть указан в SELECT-е;
4) Итоговые функции и псевдонимы нельзя использовать для GROUP BY;
5) В большинстве СУБД нельзя использовать GROUP BY для столбцов с переменной длиной;
6) Если в столбце есть NULL - все значения NULL будут сгруппированы отдельно;
7) GROUP BY должно стоять после предложения должно стоять после WHERE и перед ORDER BY.

В некоторых СУБД слово ALL позволяет извлекать все группы, даже с NULL.

"Предупреждение:"
Некоторые СУБД позволяют указывать столбцы в GROUP BY порядковыми номерами:
GROUP 2,1 означает группировку по второму столбцу, а затем - по первому.
Такую формулировку надо использовать С ПРЕДЕЛЬНОЙ ОСТОРОЖНОСТЬЮ!

- Фильтрация по группам:

Условия WHERE касаются именно строк.
Для фильтрации групп используются условия после ключевого слова HAVING.

Предложение HAVING поддерживает все операторы предложения WHERE (метасимволы, логические операторы и т.д.).

Пример:
SELECT cust_id, COUNT(*) AS orders
FROM orders
GROUP BY cust_id
HAVING  COUNT(*) >= 2;

"Примечание:"
WHERE фильтрует строки до группировки данных,
HAVING фильтрует даннеы после их группировки.
Это - очень важно!!!
Строки, что были исключены с помощью WHERE не войдут в группы, созданные GROUP BY и,
соответственно, не будут учтены в фильтре HAVING.

- Группировка и сортировка:

ORDER BY:
1) Сортирует полученные решения;
2) Может использовать любые столбцы (Не указанные в SELECT);
3) Не является необходимым.

GROUP BY:
1) Группирует строки. Но результат может быть не упорядочен;
2) Может использовать только извлекаемые столбы, должно быть указано КАЖДОЕ выражение из SELECT;
3) Требуется, если используются столбцы с итоговыми функциями.

"Примечание:"
Если используете GROUP BY - желательно использовать и ORDER BY.
Это - единственный способ правильно отсортировать данные. Не следует
надеяться, что данные будут правильно отсортированы СУБД.

Пример:
SELECT order_num, COUNT(*) AS items
FROM OrderItems
GROUP BY order_num
HAVING COUNT(*) >= 3;
ORDER BY items, order_num;

"MS ACESS" не позволяет сортировать по псевдонимам.
В ней (в этом случае) надо использовать ORDER BY COUNT(*) или ORDER BY 1.