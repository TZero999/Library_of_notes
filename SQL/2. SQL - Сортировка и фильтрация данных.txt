- ORDER BY:
Используется для сортировки результатов запроса по одному из столбцов.

"Синтаксис:"
SELECT prod_name
FROM Products
ORDER BY prod_name;

Используешь ORDER BY? - Убедись, что он стоит ПОСЛЕДНИМ в инструкции SELECT.

"Сортировка по невыбранным столбцам:"
Столбцы, по которым происходит сортировка НЕ ОБЯЗАТЕЛЬНО ДОЛЖНЫ БЫТЬ ОТОБРАЖЕНЫ в результате запроса.

"Сортировка по нескольким столбцам:"
Тут всё просто: указываем имена через запятую в необходимой очерёдности сортировки:

SELECT prod_id, prod_price, prod_name
FROM  Products
ORDER BY prod_price, prod_name;

"Сокращённая форма записи. Преимущества и недостатки:"
Написанный выше запрос можно было бы переписать, заменив последнюю строку на:

...
ORDER BY 2, 3; # сортировка столбцов по возрастанию, относительно положению столбцов В СПИСКЕ SELECT

Преимущество метода - скорость набора запроса.

Но недостатков у этого метода больше, чем преимуществ:
1) Повышается вероятность ошибки из-за банальной невнимательности;
2) Вероятность смены позиций столбцов, указанных в SELECT-е;
3) Невозможность сортировки п остолбцам, не указанным в SELECT-е.

- Направление сортировки. DESC и ASC:

"ASC:"
По умолчанию ORDER BY всегда сортирует по возрастанию, просто опуская аргумент ASC:
ORDER BY prod_price = ORDER BY prod_price ASC

"DESC:"
Сортировка по убыванию производится ключевым словом DESC.
DESC применяется ТОЛЬКО к тому слову, ПОСЛЕ которого оно стоит.

"Сортировка по нескольким столбцам:"

Если необходимо отсортировать несколько столбцов - указываем DESC после каждого из них:
1) ORDER BY prod_price DESC, prod_name DESC - Сортирует сначала по убыванию prod_price, затем по убыванию prod_name;
2) ORDER BY prod_price DESC, prod_name - Сортирует сначала по убыванию prod_price, затем по возрастанию prod_name;

"Чувствительность к регистру:"
A и a - не одно и то же? a идёт перед Б?

Всё зависит от натсроек СУБД. Для большинства СУБД A = a.
Если же нужен субъективный порядок сортировки - необходимо обращаться к администратору БД.

- WHERE:

Синтаксис:
SELECT prod_name, prod_price
FROM Products
WHERE prod_price = 3.49;

Фильтровать данные можно было бы и в клиентском приложении, но такой метод обычно не приветствуется.
БД оптимизированы для быстрой и эффективной фильтрации. К тому же это увеличивает сетевой трафик, если данные
хранятся на стороне клиента.

"Синтаксис с ORDER BY:"
SELECT prod_id
FROM Products
WHERE prod_id > 3
ORDER BY prod_name;

- Операторы предложения WHERE:

1) =            Равенство
2) <>           Неравенство
3) !=           Неравенство
4) <            Меньше
5) >            Больше
6) <=           Меньше или равно
7) >=           Больше или равно
8) !<           НЕ меньше
9) !>           НЕ больше
10) BETWEEN     Вхождение в диапазон
11) IS NULL     Значение NULL

Указанные выше операторы избыточны для одной СУБД.
но не все указанные выше операторы поддерживаются всеми СУБД.

<> и != обычно взаимозаменяемы.
Но тот же Microsoft Access поддерживает <> и не поддерживает !=.

"Пример синтаксиса с BETWEEN:"
SELECT prod_name, prod_price
FROM Products
WHERE prod_price BETWEEN 5 AND 10;

"Проверка на отсутствие значения:"
НЕЛЬЗЯ написать WHERE * = NULL.
ПРАИЛЬНАЯ запись выгляди так: WHERE * IS NULL;

В случае, если мы выполняем проверки на равенство мы не будеи получать строки,
содержащие NULL в сравниваемом столбце, т.к. NULL - это неопределённость.

