Обратная косая черта \ для обозначения классов символов, например '\d'.
Это - специальный символ в регулярных выражениях (как в обычных строках).

Есть и другие специальные символы, которые имеют особое значение в регулярках.
Они используются для усложнения поисковых конструкций. 

Вот полный перечень спецсимволов:
[ ] \ ^ $ . | ? * + ( )

* ЭКРАНИРОВАНИЕ СИМВОЛОВ:
Допустим, нам надо найти только точку. Буквально точку.

Но точка в регулярках значит "Любой символ".
Чтобы экранировать искомый символ надо добавить перед ним обратную косую черту: \.

# Пример:
{
    alert( "Глава 5.1".match(/\d\.\d/) ); // 5.1 (совпадение!)
    alert( "Глава 511".match(/\d\.\d/) ); // null ("\." - ищет обычную точку)
}

Круглые скобки - тоже спецсимвол. Для поиска круглых скобок надо так же 
использовать укранение

# Пример - ищем строку g():
{
    alert( 'function g()'.match(/g\(\)/) ); // "g()"
}

Если ищем обратную косую черту - используем... Обратную косую черту!
Просто "удваиваем" её.

# Вот пример:
{
    alert( "1\\2".match(/\\/) ); // '\'
}

* КОСАЯ ЧЕРТА:
Символ косой черты "/" - "слэш", не является специальным символом, но JS использует её для определения
границ рег. выражений: /шаблон/.

Для поиска "слэша" опять используем экранирование:

{
    alert( "1/3".match(/\d\/\d/) ); // '1/3'
}

А теперь можно вспомнить о существовании "длинного" синтаксиса new RegExp и найти "слэш" в тексте
не экранируя его:
{
    alert( "/".match(new RegExp("/")) ); //# Находит / 
}

* ПОЧЕМУ НЕ РАБОТАЕТ new RegExp?:
Если используем такой вид записи - нам нужно другое экранирование.

# Пример поиска с помощью new RegExp по старому принципу:
{
    let regexp = new RegExp("\d\.\d");
    alert( "Глава 5.1".match(regexp) ); //# null, не сработало
}

Поиск из примера сверху работал при "коротком" синтаксисе, но не работает при "длинном".

Причина - символы обратной косой черты, "обратного слэша", съедаются строкой.
Обычные строки тоже имеют свои специальные символы, такие как "\n". 

Для их экранирования используется обратная косая черта - "Обратный слэш".
Вот как воспринимается строка "\d.\d":
{
    alert("\d\.\d"); //# d.d
}

Строковые кавычки "съели" символы "обратного слэша".
Если у строк есть комбинация символа с обратным слэшем - они воспринимаются как строковые.
Если же такой комбинации нет (Например, \z, \d) - обратный слэш просто удаляется.

Т.О. new RegExp получает строку без обратных косых строк.
Поэтому поиск не работает так, как мы привыкли.

Поэтому, чтобы всё работало в "длинном" синтаксисе (new RegExp) нам надо удваивать не "слэш",
а "обратный слэш".

# Пример корректного поиска с помощью new RegExp:
{
    let regStr = "\\d\\.\\d";
    alert(regStr); //# \d\.\d (теперь правильно)
    
    let regexp = new RegExp(regStr);
    alert( "Глава 5.1".match(regexp) ); //# 5.1

    regexp = new RegExp("\\d/\\d")
    alert( "1/3".match(regexp) ); //# 1/3
}

* ИТОГО: 
1) Для поиска спецсимволов нужно добавлять перед ними \ - "экранировать" их.
2) Нам нужно экранировать /, если мы используем "короткий синтаксис": /.../
3) При 