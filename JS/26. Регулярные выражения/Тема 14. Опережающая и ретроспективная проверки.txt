Порой приходится искать соответствия шаблону, за или перед которыми есть или нет другой шаблон.

Для этого в regexp-ах есть свой специальный синтаксис:
Опережающая (lookahead) проверка: X(?=Y).
Ретроспективная (lookbehind) проверка (?<=Y)X.

* ВАЖНОЕ ПО ТЕМЕ:
Это - ПРОВЕРКА! Содержимое скобок в результат не входит!
Отсюда исходит то, что это - восхитительный инструмент для борьбы с попаданием в массив сопадений
лишних пробелов, знаков препинания и т.п., так как исключающие наборы этим сильно грешат.

* ОПЕРЕЖАЮЩАЯ ПРОВЕРКА - LOOK AHEAD:
Синтаксис: X(?=Y).

Он означает: "найди мне X, но только если за ним следует Y".

Рассмотрим на примере, в котором надо найти стоимость в строке с другими цифрами. 
# Пример использования:
{
    let str = "В Турции 1 кг индейки стоит 4$";
    let regexp = /\d+(?=€|\$)/
    alert( str.match(regexp)) //# 4, число 1 проигнорировано, так как за ним НЕ следует € или $.
}

Найдя 'X' движок регулярных выражений проверяет, что стоит после него.
Если там не 'Y' - совпадение игнорируется и поиск продолжается.

Возможны и более сложные проверки, например X(?=Y)(?=Z) означает:
1) Найти X.
2) Проверить, идёт ли Y сразу после X (если нет – не подходит).
3) Проверить, идёт ли Z сразу после X (если нет – не подходит).
4) Если обе проверки прошли – совпадение найдено.

То есть этот шаблон означает, что мы ищем X при условии, что за ним идёт и Y, и Z.
Такое возможно только при условии, что шаблоны Y и Z не являются взаимно исключающими.

# Примеры:
{
    alert( 'Какая досада!'.match(/Как(?=ая)(?=.*досада!)/) );   //# Как
    alert( "1 индейка стоит 30€".match(/\d+(?=\s)(?=.*30)/) );  //# 1
}

Опять же, это проверки, дающие "true" или "false", проверяемая часть строки не входит в результат.

* НЕГАТИВНАЯ ОПЕРЕЖАЮЩАЯ ПРОВЕРКА:
Синтаксис: X(?!Y).

Здесь, собственно, всё наоборот: "Найди такой X, за которым НЕ следует Y".

# Пример
{
    let str = "2 индейки стоят 60€";
    alert( str.match(/\d+(?!€)/) ); //# 2 (в этот раз цена проигнорирована)
}

* РЕТРОСПЕКТИВНАЯ ПРОВЕРКА - LOOK BEHIND:
Обратите внимание: функция не поддерживается в браузерах НЕ на движке V8: Safari и Internet Explorer и т.п.

Опережающая проверка помогает смотреть, что идёт ПЕРЕД.
То бишь она добавляет совпадение в результат, если перед ним есть некий шаблон.

Синтаксис:
(?<=Y)X - находит X, если перед ним ЕСТЬ Y, Позитивная проверка.
(?<!Y)X - находит X, если перед ним НЕТ Y. Негативная проверка.

Протестируем ретроспективные проверки поменяв местоположение знака доллара в тексте:
{
    let str = "В Турции 1 кг индейки стоит $4";
    let regexp = /(?<=€|\$)\d+/;
    alert( str.match(regexp)) //# 4, число 1 проигнорировано, так как перед ним НЕТ € или $.
}

* ПРОВЕРКИ + СКОБОЧНЫЕ ГРУППЫ = ЧАСТЬ ШАБЛОНА ПРОВЕРКИ В РЕЗУЛЬТАТЕ:
Как правило, то что находится внутри скобок, задающих опережающую и ретроспективную проверки,
не включается в результат совпадения.

Например, в шаблоне \d+(?=€) знак € не будет включён в результат. 
Это логично, ведь мы ищем число \d+, а (?=€) – это всего лишь проверка, что за ним идёт знак €.

А если нам всё же надо захватить и совпадение, и часть шаблона проверки?
Для этого используем дополнительные скобки.

# Пример:
{
    let str = "1 индейка стоит 30€";
    let regexp = /\d+(?=(€|kr))/; //# добавлены дополнительные скобки вокруг €|kr
    alert( str.match(regexp) ); //# [30, €]
}

* ИТОГО:

1) X(?=Y)
Positive Look Ahead - опережающая позитивная.
Даст X, если сразу за ним следует Y.

2) (?<=Y)X
Positive Look Behind - ретроспективная позитивная.
Даст X, если сразу перед ним был найден Y.

3) X(?!Y)
Negative Look Ahead - опережающая негативная.
Даст X, если сразу за ним НЕ следует Y.

4) (?<!Y)X
Negative Look Behind - ретроспективная негативная.
Даст X, если сразу перед ним НЕ был найден Y.

Кстати, regexp.match (без флага g) и str.matchAll (всегда) возвращают совпадения
со свойством index, которое содержит позицию совпадения в строке, так что мы можем посмотреть на контекст.
