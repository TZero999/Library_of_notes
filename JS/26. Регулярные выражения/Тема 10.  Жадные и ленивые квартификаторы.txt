* ЖАДНЫЕ И ЛЕНИВЫЕ КВАНТИФИКАТОРЫ

Определимся, что у квантификаторов есть 2 режима работы. Назовём их "Жадный" и "Ленивый".
Квантификаторы любят "жадничать". По умолчанию они всегда работают в "жадном" режиме.

# Пример:
{
    let regexp = /".+"/g; //# Ищем слова из 1+ символов в кавычках.
    let str = 'a "witch" and her "broom" is one';
    alert( str.match(regexp) ); //# "witch" and her "broom". Неожиданно?
}

А ведь мы ожидали получить ["witch","broom"]...

* ЖАДНЫЙ РЕЖИМ:
Движок регулярок в JS работает следующим образом:
- Пробует найти все совпадения с шаблоном на текущей позиции;
- Если совпадения нет - переходит на следующую позицию.

Принцип работы "жадного" режима в том, что движок регулярного выражения пытается получить максимальное количество символов.
Для этого он, после нахождения первого символа (в примере выше - кавычки), переходит на следующую позицию и 
видит на ней "любой символ". 
Шаблон совпадает? Да! 

А дальше движок делает то, чего мы не ожидаем.
Он начинает добавлять все подходящие символы до конца строки и останавливается только в конце строки.

Затем движок понимает, что символов не осталось и начинает ОТСТУПАТЬ НАЗАД, сокращая совпадения.
Он находит символ, подходящий под шаблон ".+". такой символ стоит сразу перед концом строки.
Но тут нет кавычки. Т.О. отступы продолжаются посимвольно, пока не будет обнаружена кавычка.

В итоге мы получаем ["witch" and her "broom"], вместо ["witch","broom"].

* ЛЕНИВЫЙ РЕЖИМ:
"Ленивый" режим противоположен "жадному".
Он повторяет поиск по шаблону квантификатора наименьшее количество раз.

По умолчанию включен "Жадный" режим.
"Ленивый" режим включается путём добавления символа "?" после символа квантификатора:
"+?", "*?" и "??".

Сам по себе знак "?" является квантификатором, обозначающим диапазон {0,1}.
Но если мы добавляем его после другого квантификатора - он меняет режим квантификатора на "ленивый".

Теперь тот же пример, но с "ленивым" квантификатором:
{
    let regexp = /".+?"/g;
    let str = 'a "witch" and her "broom" is one';
    alert( str.match(regexp) ); //# ["witch","broom"]
}

* ЛЕНИВЫЙ РЕЖИМ ВКЛЮЧАЕТСЯ ДЛЯ КАЖДОГО КВАНТИФИКАТОРА ОТДЕЛЬНО
# Пример:
{
    alert( "123 456".match(/\d+ \d+?/) ); //# [123 4]
}

Как видно из примера, первый квантификатор "+" забрал все 3 цифры, а второй "+" в ленивом режиме и забрал только одну.

* АЛЬТЕРНАТИВНЫЙ ПОДХОД:
Регулярные выражения часто позволяют добиться одинакового результата разными путями.

В нашем случае можно использовать регулярное выражение '/"[^"]+"/g' вместо "ленивого" режима:
{
    let regexp = ' /"[^"]+"/g; ' //# Пришлось "экранировать" из-за особенностей редактора
    let str = a "witch" and her "broom" is one;
    alert( str.match(regexp) ); //# ["witch","broom"]
}

Регулярное выражение ' "[^"]+" ' получит нужный результат, потому что оно ищет кавычку '"', за которой следует один
или несколько символов «не-кавычек» [^"], а затем – закрывающая кавычка.

Движок регулярного выражения набирает, сколько может, "не кавычек" [^"]+, пока не встречает
закрывающую кавычку, на которой останавливается.

Это не замена ленивому квантификатору. Это просто другой вариант для данного примера.

Так, бывают случаи, с которыми не справится ленивый квантификатор, а хитрый шаблон - справится.

Например, надо найти ссылку вида <a href="..." class="doc">. href будет произвольным.
Первая мысль - использовать шаблон /<a href=".*" class="doc">/g

# Проверяем:
{
    let str = '...<a href="link" class="doc">...';
    let regexp = /<a href=".*" class="doc">/g;
    alert( str.match(regexp) ); // <a href="link" class="doc"> //# Работает!
}

# А если ссылок будет много?
{
    let str = '...<a href="link1" class="doc">... <a href="link2" class="doc">...';
    let regexp = /<a href=".*" class="doc">/g;
    alert( str.match(regexp) ); // <a href="link1" class="doc">... <a href="link2" class="doc">
    //# Две ссылки в одном совпадении. Явно так быть не должно.
}
Здесь квантификатор "*" забрал слишком много всего.

Хорошо, делаем квантификатор "ленивым". Пробуем:
{
    let str = '...<a href="link1" class="doc">... <a href="link2" class="doc">...';
    let regexp = /<a href=".*?" class="doc">/g;

    alert( str.match(regexp) ); // [<a href="link1" class="doc">,<a href="link2" class="doc">]
    //# Работает!
}
Теперь, кажется, всё работает правильно. Совпадения 2, всё отлично.

Пробуем другой текст:
{
    let str = '...<a href="link1" class="wrong">... <p style="" class="doc">...';
    let regexp = /<a href=".*?" class="doc">/g;
    alert( str.match(regexp) ); // [<a href="link1" class="wrong">... <p style="" class="doc">]
    //# Опять неправильное совпадение!
}

Разбираем, что у нас здесь происходит:
1) Регулярное выражение находит начало ссылки <a href="...>;
2) Затем оно ищет .*?, берёт по одному символу (лениво) и проверяет совпадения
   для class="doc".
3) Совпадения class="doc" нет, поэтому продолжаем;
4) достигаем class="doc">. Поиск завершён.
Но конец совпадения находится уже за границей ссылки <a...> в другом теге <p>.

Выходит, если нам нужен шаблон для <a href="...something..." class="doc"> и с ленивым 
и с жадным режимами квантификаторов будут проблемы.

Правильным вариантом станет использовать шаблон: href=' /"[^"]*"./ '
Он найдёт все символы внутри атрибута href до ближайшей следующей кавычки.
Как раз то, что нам нужно:
{
    let str1 = '...<a href="link1" class="wrong">... <p style="" class="doc">...';
    let str2 = '...<a href="link1" class="doc">... <a href="link2" class="doc">...';
    let regexp = ' /<a href="[^"]*" 'class="doc">/g; //# Опять вынужденно экранирую.
    alert( str1.match(regexp) ); //# Работает! Совпадений нет, всё правильно
    alert( str2.match(regexp) ); //# <a href="link1" class="doc">, <a href="link2" class="doc">
}

* ИТОГО:
У квантификаторов есть два режима работы:
- Жадный:
По умолчанию движок регулярного выражения пытается повторить квантификатор столько раз,
сколько это возможно. Например, \d+ получит все возможные цифры. Когда цифры закончатся или он
дойдёт до конца строки, движок продолжит искать совпадение для оставшегося шаблона.
Если совпадения не будет, он уменьшит количество повторов (осуществит возврат) и попробует снова.

- Ленивый:
Включается с помощью знака вопроса ? после квантификатора. Движок регулярного выражения
пытается найти совпадение для оставшегося шаблона перед каждым повторением квантификатора.

Как мы увидели на примере поиска строк в кавычках, ленивый режим не «панацея» от всех проблем
жадного поиска. В качестве альтернативы может выступать «хорошо настроенный» жадный поиск.