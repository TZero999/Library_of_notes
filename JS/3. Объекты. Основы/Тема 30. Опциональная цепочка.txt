Опциональная цепочка '?.'

Опциональная цепочка ?. — это безопасный способ доступа к свойствам вложенных объектов,
даже если какое-либо из промежуточных свойств не существует.

- ПРОБЛЕМА НЕСУЩЕСТВУЮЩЕГО СВОЙСТВА

Проблема довольно распространена. Предположим, есть объект "user". Этот объект содержит информацию о пользователях.
У большинства пользователей в адресе есть свойсвто user.address, которое содержит значение user.address.street.
Но что, если некоторые пользователи не стали указывать улицу проживания?

В таком случаем мы получим ошибку, попытавшись обратиться к user.address.street пользователя, который не указал улицу.

let user = {}; // У пользователя нет свойства "address"
alert(user.address.street); // Ошибка!

Выходит это из-за того, что JS работает следующим образом: user.address имеет значение undefined, если он не указан
в качестве свойства объекта. Попытка получить подсвойство значения undefined завершается ошибкой.

Ещё пример:
У нас есть возможность получить объект, соответствующий элементу веб страницы.
Делается это вызовом специального метода "document.querySelector('.elem')". Если такого элемента нет - он возвращает null.

// document.querySelector('.elem') равен null, если элемента нет
let html = document.querySelector('.elem').innerHTML; // TypeError: Cannot read properties of null (reading 'innerHTML')

Но ведь бывают ситуации, когда отсутствие улицы у пользователя - это нормально. И когда элемент отсутствует -
это тоже нормально. Потому лучше было бы получить undefined или null в качестве результат, нежели ошибку.

- КАК РЕШИТЬ ЭТУ ПРОБЛЕМУ?

Можно было бы воспользоваться if, или условным оператором ?. Вот так:
alert(user.address ? user.address.street : undefined);

Будет работать, но выглядит неэлегантно, user.address появляется в коде дважды.

А уж для document.querySelector вовсе выглядит дико:
let html = document.querySelector('.elem') ? document.querySelector('.elem').innerHTML : null;

Если свойства "вложены" более глубоко - надо будет использовать ещё больше повторений:
alert(user.address ? user.address.street ? user.address.street.name : null : null);

Кстати, есть ещё хитрость:
alert( user.address && user.address.street && user.address.street.name ); // undefined (без ошибки)

Проход при помощи логического оператора И через весь путь гарантирует, что компоненты существуют.
Но это тоже "костыль".

Для решения этой проблемы в JS была добавлена опциональная цепочка ?.

- Опциональная цепочка ?.

Прицнип её работы прост:
?. останавливает вычисление возвращает undefined, если значение перед ?. равно undefined или null.

Так, если есть некое свойство value.prop, то инструкция value?.prop ьбудет иметь 2 исхода:
1) Работает как value.prop, если значение value существует;
2) Когда value равно undefined/null - возвращает undefined.

Если рассматривать примеры выше, вот использование опциональной цепочки для доступа к user.address.street:

let user = {}; // пользователь без адреса
alert( user?.address?.street ); // undefined (без ошибки)

Причём такой код будет работать, даже если самого объекта не существует:

let user = null;
alert( user?.address ); // вернёт undefined
alert( user?.address.street ); // вернёт undefined

- Не стоит злоупотреблят ьопциональной цепочкой

Следует использовать ?. только там, где факт отсутствия значений является нормальным.

Так, если по логике нашего кода объект user обязан существовать, но свойство address не является обязательным -
стоит использовать запись user.address?.street, но не user?.address?.street.

Если user окажется undefined мы увидим это по ошибке. Если же использовать ?. слишком часто -
ошибки просто будут замалчиваться и их сложнее будет отлаживать.

ПЕРЕМЕННАЯ ПЕРЕД ?. ДОЛЖНА БЫТЬ ОБЪЯВЛЕНА!
Если переменной user вообще нет (а не она равна null) код user?.anything приведёт к ошибке.

- Сокращённое вычисление

Как было сказано ранее ?. сразу останавливает вычисление, ЕСЛИ ЛЕВАЯ ЧАСТЬ выражения не существует.

Т.О. если после ?. есть какие-то вызовы функций или операции - они не произойдут.
Пример:

let user = null;
let x = 0;
user?.sayHi(x++); // нет "user", поэтому выполнение не достигает вызова sayHi и x++
alert(x); // 0, значение не увеличилось

- Другие варианты применения: ?.() и ?.[]

Опциональная цепочка ?. - это не оператор!
Это - специальная синтаксическая конструкция. Она может работать с функциями и квадратными скобками.

Так ?.() используется для вызова функции, которая может не существовать.
Пример:

let userAdmin = {
    admin() {
      alert("Я админ");
    }
  };
let userGuest = {};
userAdmin.admin?.(); // Я админ
userGuest.admin?.(); // ничего не произойдет (такого метода нет)

Синтаксис ?.[] работает если мы хотим использовать скобки для доступа к свойствам вместо точки.
Пример:

let key = "firstName";

let user1 = {
  firstName: "John"
};
let user2 = null;
alert( user1?.[key] ); // John
alert( user2?.[key] ); // undefined

С помощью ?. мы можем организовать безопасное удаление:
Так:
delete user?.name; // удаляет user.name только если пользователь существует.

- Можно использовать опциональную цепочку для безопасного чтения и удаления.
Но записать что-либо в объект мы таким образом не сможем:

let user = null;
user?.name = "John"; // Ошибка, не работает, т.к. это то же самое, что и написать undefined = "John"

- ИТОГО:

Синтаксис опциональной цепочки имеет 3 формы:

1) obj?.prop – возвращает obj.prop (если obj существует). Иначе undefined.
2) obj?.[prop] – возвращает obj[prop] (если obj существует). Иначе undefined.
3) obj.method?.() – вызывает obj.method() (если obj.method существует). Иначе undefined.

они просты в синтаксисе и логике:
?. проверяет ЛЕВУЮ часть на null/undefined и позволяет продолжить вычисление, если это не так.

Следует использовать ?. осторожно - только там, где это допустимо по логике кода.
Иначе она будет скрывать от нас ошибки программирования.