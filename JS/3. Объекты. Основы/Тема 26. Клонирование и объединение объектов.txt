КЛОНИРОВАНИЕ И ОБЪЕДИНЕНИЕ

Копирование объектной переменной создаёт ещё одну ссылку на объект.

А что если объект надо дублировать? Создать независимую копию?

Это выполнимо, но в JS для этого нет встроенного метода.
НО необходимость в этом возникает довольно редко, почти всегда вполне хватает обычной ссылки.

КЛОНИРОВАНИЕ происходит путём создания нового объекта и воспроизведения структуры существующего.
Таким образом мы просто создаём объект, перебираем свойства существующего и копируем их на примитивном уровне:

let user = {
    name: "John",
    age: 30
  };
  
  let clone = {}; // новый пустой объект

  for (let key in user) {       // Копируем свойства 
    clone[key] = user[key];
}                             // теперь у нас есть clone - независимый объект с тем же содержимым

OBJECT.ASSIGN

Клонирование объекта можно произвести с помощью специального метода Object.assign

Синтаксис:
Object.assign(dest, [src1, src2, src3...])

Разберём этот метод:
1) dest - это целевой объект;
2) srcN - исходные объекты;
3) Метод позволяет скопировать СВОЙСТВА ИСХОДНЫХ объектов srcN В ЦЕЛЕВОЙ объект dest;
4) На выходе метод возвращает объект dest;

Этот метод можно использовать для ОБЪЕДИНЕНИЯ нескольких объектов.
Пример:

let user = { name: 'John' };
let permissions1 = { canView: true };
let permissions2 = { canEdit: true };

Object.assign(user, permissions1, permissions2); // копируем все свойства из permissions1 и permissions2 в user

В итоге выполнения кода получаем объект "user" со свойствами "name: 'John', canView: true, canEdit: true"

ЕСЛИ скопированное имя УЖЕ СУЩЕСТВУЕТ оно будет ПЕРЕЗАПИСАНО:

let user = { name: "John" };
Object.assign(user, { name: "Pete" });
alert(user.name); // теперь user = { name: "Pete" }

