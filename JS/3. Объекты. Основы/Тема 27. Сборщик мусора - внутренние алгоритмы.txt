Основной алгоритм сборки мусора называется «алгоритм пометок» (от англ. «mark-and-sweep»).

Согласно нему сборщик мусора постоянно выполняет следующие шаги:

1) Помечает корневые объекты;
2) Следует по ним и помечает все ссылки ИЗ них;
3) Идёт по отмеченным объектам и помечает ссылки из них;
4) ... и т.д. Продолжает пока не будут помечены все достижимые из корней ссылки;
5) Удаляет все непомеченные объекты.

ОПТИМИЗАЦИЯ:

Движки JS использует ряд оптимизаций, чтобы пометка происходила быстрее и не задерживала выполнения кода:

1) Сборка по поколениям - объекты делятся на 2 коллекции "Новые" и "Старые".
Частота проверок распределяется между этими 2-мя наборами. Новые объекты часто имеют короткую жизнь:
появляются, отрабатывают и быстро умирают. Поэтому имеет смысл в первую очередь отслеживать именно их.
Те объекты, что выживают достаточно долго становятся "старыми" и отслеживаются реже.

2) Инкрементальная сборка - если объектов много и мы обходим каждый (и стараемся сделать это сразу) -
это может привести к видимым задержкам выполнения скрипта.
Поэтому движок делит множество объектов на части и очищает их по очереди.
Получается несколько сборок мусора поменьше, вместо одной всеобщей = много мелких задержек,
вместо одной глобальной.

3) Сборка в свободное время - позволяет уменьшить влияние на производительно сборщик старается
работать в момент простоя процессора процессора.

Таких методов оптимизации уйма, многие движки используют свои хитрости и методы.
К тому же методы оптимизации развиваются вместе с движками.

