По спецификации в качестве ключей свойств объектов подходят только строки и символы.
Нельзя использовать ни числа, ни лоническме значения.

- Символы

"Символ" представляет собой уникальный идентификатор.
Новые символы создаются с помощью функции Symbol():

let id = Symbol();

При создании можно двть символу описание (имя). Оно используется в основном для отладки кода. 
Пример:

let id = Symbol("id"); // в круглых скобках описание символа (его имя).

Описание не влияет на содержание символа.
Если мы создадим множество символов с одинаковым описанием - это будут разные символы.
Пример:

let id1 = Symbol("id");
let id2 = Symbol("id");
alert(id1 == id2); // false

У символов в JS есть свои особенности.
Например, СИМВОЛЫ НЕ ПРЕОБРАЗУЮТСЯ В СТРОКИ АВТОМАТИЧЕСКИ!
Пример:

let id = Symbol("id");
alert(id); // TypeError: Cannot convert a Symbol value to a string

Это - "защита" от путаницы, ведь строки и символы - это совершенно разные типы данных и они не должны
неконтролируемо конвертироваться друг в друга.

Если нам всё же необходимо вывести символ через алерт мы преобразовываем его с строку с помощью метода .toString().
Пример:

let id = Symbol("id");
alert(id.toString()); // Symbol(id), теперь работает

Если нам надо вывести ТОЛЬКО ОПИСАНИЕ символа - используем свойство symbol.description.
Пример:

let id = Symbol("id");
alert(id.description); // id

- "Скрытые" свойства

Символы позволяют нам создавать "скрытые" свойства объектов, к которым нельзя будет случайно обратиться и перезаписать их
из других частей нашего ПО. 

Например, мы работаем с объектами user. Они являются частью стороннего кода. Мы же хотим добавить к ним идентификатор.
Для этого используем символьный ключ:

let user = {
    name: "Вася"
};
  let id = Symbol("id");
  user[id] = 1;
alert( user[id] ); // мы можем получить доступ к данным по ключу-символу

Но зачем использовать именно символ id, а не строку кода с свойством объекта?
Да, мы могли бы дописать свойство id в объект user, если бы он не был сторонним объектом разработки третьих лиц.
Так как этого мы сделать не можем - присваиваем id отдельным участком кода.

К тому же к символу сложнее обратиться случайно, а сторонний код и вовсе вряд л иего увидит.

К тому же, предположим, что есть ещё один скрипт других разработчиков. И он тоже хочет записать собственный идентификатор в объект user.
Наш идентификатор и "их" идентификатор не будут конфликтовать, так как символы всегда уникальны.

А вот если бы мы добавили свойство объекту user у нас возникли бы следующие проблемы:
let user = { name: "Вася" };
user.id = "Наш идентификатор"; // Объявляем в нашем скрипте свойство "id"
user.id = "Их идентификатор" // ...другой скрипт тоже хочет свой идентификатор...
// Итог - свойство перезаписано сторонней библиотекой!

- Символы в литеральном объекте

Если хотим использовать символы внутри блока объекта (при литеральном объявлении {...}) - надо заключить его в квадратные скобки.
Пример:

let id = Symbol("id");
let user = {
  name: "Вася",
  [id]: 123 // просто "id: 123" не сработает
};

Это происходит из-за того, что значение переменной id нам надо будет использовать в качестве ключа, а не как строку "id".

- Символы игнорируются циклом for...in, клонируются Object.assign

Свойства, у которых в качестве ключа используются символы не перебираются циклом for...in.
Пример:

let id = Symbol("id");
let user = {
  name: "Вася",
  age: 30,
  [id]: 123
};
for (let key in user) alert(key); // name, age (свойства с ключом-символом не будет среди перечисленных)
alert( "Напрямую: " + user[id] ); // а вот прямой доступ по символу сработает.

Это - часть принципа "сокрытия символьных свойств". Благодаря этому сторонняя библиотека или скрипт, работающие с нашим объектом,
не получат ненароком наше символьное свойство при переборе свойств объекта.

А вот инструкция Object.assign (для клонирования объектов) скопирует и строчные и символьные свойства.
Пример:

let id = Symbol("id");
let user = {
  [id]: 123
};
let clone = Object.assign({}, user);
alert( clone[id] ); // 123

- Глобальные символы. Поиск и создание с помощью Symbol.for(key).

Все символы уникальны, даже если их имена совпадают.
Но что, если нам НАОБОРОТ надо, чтобы символы с одинаковыми именами считались одной сущностью?

Для этого существует ГЛОБАЛЬНЫЙ РЕЕСТР СИМВОЛОВ.
Мы сами можем создавать в нём символы и обращаться к ним позже. При каждом обращении нам будет гарантированно
возвращаться один и тот же символ.

Для чтения (или создания) символа из реестра используется вызов Symbol.for(key).

он проверяет глобальный реестр и при наличии в нём символа с именем key возвращает его. 
Если такого символа там нет - создаёт новый символ Symbol(key) и записывается в реестр под ключом key.
Пример:

let id = Symbol.for("id"); // если символа не существует - он будет создан.
let idAgain = Symbol.for("id"); // читаем его снова и записываем в другую переменную.
alert( id === idAgain ); // true // проверяем - это один и тот же символ.

Символы в реесте - глобальные. Если нам нужен символ, доступный во всём коде - его надо сделать глобальным.

- Возвращение имени глобального символа. Symbol.keyFor.

У метода, что ищет глобальный символ по имени (Symbol.for(key)) есть обратный метод:
"Symbol.keyFor"  - принимает глобальный символ и возвращает нам его имя.
Пример:

// получаем символ по имени
let sym = Symbol.for("name");
let sym2 = Symbol.for("id");

// получаем имя по символу
alert( Symbol.keyFor(sym) ); // name
alert( Symbol.keyFor(sym2) ); // id

Для неглобальных символов этот метод работать не будет - он не найдёт их и вернёт undefined.
Вместо него для неглобальных символов используем свойство description:

//опускаем let-ы. Из имён символов и так всё ясно.
alert( Symbol.keyFor(globalSymbol) ); // name, глобальный символ
alert( Symbol.keyFor(localSymbol) ); // undefined для неглобального символа
alert( localSymbol.description ); // name

- Системные символы:

Существует много "системных" символов. Они используются внутри JS. 
Они позволяют настраивать различные аспекты поведения объектов.

Их список доступен по ссылке https://tc39.github.io/ecma262/#sec-well-known-symbols

Например, Symbol.toPrimitive позволяет описать правила для объекта,
согласно которымон будет преобразован в примитив. Об этом будет сказано в следующей теме.

- ИТОГО:

Символы - примитивный тип данных.
Они используются для создания уникальных идентификаторов.
Символы создаются функцией Symbol(), в которую можно передать имя (описание) символа.

Символы с одним и тем же именем - это разные символы.
Если мы хотим сделать одноимённые символы равными - следует использовать глобальный реестр:
Вызов Symbol.for(key) возвращает/ создаёт глобальный символ с key в качестве имени.
Многократные вызовы команды Symbol.for с одним и тем же аргументом возвращают один и тот же символ.

У символов 2 основных вариантов использования:

1) «Скрытые» свойства объектов.
Если мы хотим добавить свойство в объект, который «принадлежит» другому скрипту или библиотеке,
мы можем создать символ и использовать его в качестве ключа.
Символьное свойство не появится в for..in, так что оно не будет нечаянно обработано вместе с другими.
Также оно не будет модифицировано прямым обращением, так как другой скрипт ничего не знает о нашем символе.
Таким образом, свойство будет защищено от случайной перезаписи или использования.

2) Существует множество системных символов, используемых внутри JavaScript, доступных как Symbol.*.
Мы можем использовать их, чтобы изменять встроенное поведение ряда объектов.
Например, в дальнейших главах мы будем использовать Symbol.iterator для итераторов,
Symbol.toPrimitive для настройки преобразования объектов в примитивы и так далее.

P.S.: 
Технически символы не скрыты на 100%.
Существует встроенный метод Object.getOwnPropertySymbols(obj) - он позволяет получить все свойства объекта,
включая ключи-символы.
Также существует метод Reflect.ownKeys(obj) - он позволяет вернуть все ключи объекта, включая символьные.

