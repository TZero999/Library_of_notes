Глобальный объект предоставляет переменные и функции, доступные в любом месте программы.
По умолчанию это те объекты, что уже встроены в язык или среду исполнения кода.

Так, в браузере это объект window, в Node.js - global. 

Недавно в язык JS было добавлено стандартизированное имя глобального объекта - globalThis.
Он должен поддерживаться в любом окружении.

Лучше привыкать использовать globalThis, хотя стоит помнить о том, что есть и другие имена глобальных объектов.
Ко всем свойствам глобального объекта можно обращаться напрямую.

Пример:
alert ("Привет!") == window.alert("Привет!");

- ВАЖНО! Переменные var становятся глобальными объектами.
В браузере функции и переменные, которые объявляются через VAR становятся глобальными объектами:
    var gVar = 5;
    let gLet = 10;
    alert(globalThis.gVar); //# 5 
    alert(globalThis.gLet); //# Undefined
Получается, что gVar стал свойством глобального объекта, а вот gLet - нет.

# P.S.: Хотя в Node.js у меня не срабортал данный трюк, оба alert-а вернули Undefined.

Так же это работает и с функциями, объявленными через Function Declaration (выражения с ключевым словом function).

Не стоит полагаться на такое поведение var. Оно поддерживается д осих пор лишь для совместимости.
В современных проектах, использующих JS-модули, такого не прооисходит.

Объявление переменной через let, как мы проверили в примере выше, не допускает подобного поведения.

ТАКИМ ОБРАЗОМ если свойство настолько важное, что должно быть доступным для всей программы - стоит записывать их в глобальный объект напрямую:

window.currentUser = {
    name: "John"
};
//# ... код ...
alert (currentUser.name);

Глобальные переменные рекомендуются использовать как можно реже.
Дизайн кода, при котором функция получает входные параметры и выдаёт определённый результат, чище, надёжнее и удобнее для тестирования,
по сравнению с тем, когда используются внешние, а тем более глобальные переменные.

- Использование для полифилов

Глобальный объект можно использовать, чтобы проверить поддержку возможностей языка.
Например, проверим наличие встроенного объекта Promise (в очень старых браузерах такая поддержка отсутствует):

if(!globalThis.Promise) {
    alert("Вы пользуетесь устаревшим браузером!")
} else {
    alert ("Ваш браузер обладает встроенным объектом Promise.");
};

Если получим утверждение, что наш браузер устарел - реализуем полифил самостоятельно:
добавим функции, которые не поддерживаются окружением, но существуют в современном стандарте.

if (!window.Promise) {
    window.Promise = ... //# собственная реализация современной возможности языка
};

- ИТОГО:

1) Глобальный объект хранит переменные, которые должны быть доступны в любом месте программы.
Это касается как встроенных объектов (например, Array), так и характерных для окружения свойств (например, window.innerHeight - высота окна браузера).

2) Глобальный объект имеет универсальное имя - globalThis.
Однако чаще на него ссылаются используя имя, характерное для используемого окружения.

3) Следует хранить значения в глобальных объектах только если они действительно важны и глобальны для всего проекта.
Не стоит злоупотреблять ими и использовать бездумно повсеместно.

4) В браузерах функции и переменные, объявленные через var, считаются свойствами глобального объекта.
Исключение - момент, когда мы используем модули - разделение нашего JS-проекта на файлы.

5) Для того, чтобы код выглядел проще и его легче было поддерживать - следует обращаться к свойствам глобального объекта напрямую, как "window.xxx".