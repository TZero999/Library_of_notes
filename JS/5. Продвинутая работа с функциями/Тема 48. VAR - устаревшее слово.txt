Мы знаем, что существует 3 ключевых слова, для объявления переменных:
1) let;
2) const;
3) var.

let и const по отношению к ЛЕКСИЧЕСКОМУ ОКРУЖЕНИЮ и области видимости ведут себя одинаково.

Но "var" работает иначе. Var редко используется в современных скриптах, но повсеместно встречается в чуть более старых.
"Var" объявляется так же, как и "let":

function sayHi() {
    var phrase = 'Привет!';
    alert (phrase);
    }
sayHi(); //# Привет!
alert (phrase); //# Ошибка, phrase не определена.

В этой ситуации всё стандартно. Переменная phrase определена внутри функции. Получить к ней доступ извне у нас не выходит.

- Для "var" не существует блочной области видимости
Область видимости переменных var ограничивается либо функцией, либо всем скриптом (если переменная глобальная).
Таким образом такие переменные доступны за пределами блока.

Пример:
if (true) {
    var test_1 = true;
    let test_2 = false;
    }
    alert(test_1); //# Видим true.
alert(test_2); //# Видим ошибку "test_2 is not defined".

Получается, что var игнорирует блоки и мы молжем получить переменную test_1 извне.
А вот let учитывает то, что переменная test_2 была объявлена внутри блока и не даст нам доступ к ней извне.

С ЦИКЛАМИ будет так же: если объявим "i" через "var" - будем иметь к ней доступ вне цикла.

А вот если блок кода будет ещё и внутри функции - var начнёт работать аналогично let.

- Почему var позволяет выйти за пределы блока кода?
Раньше блоки кода не имели своего лексического окружения. Именно из-за этого var "не видит" блоков кода работает с ними так, как работает.

- VAR допускает повторное объявление
var user = 'Pete';
var user; //# Ошибки не будет, строка просто будет проигнорирована.
alert(user); //# Pete

- VAR обрабатывается в начале запуска функции

Если переменная var локальная - она обрабатываются при старте выполнения функции 
Если переменная var глобальная - она обрабатывается при запуске самого скрипта.

Т.О. переменные var считаются объявленными с самого начала исполнения функции, вне зависимости от того, в каком месте кода функции она объявляется.
Единственное исключение - если переменная var находится ещё в одной вложенной функции.

Пример:
function sayHi() {
    phrase1 = "Привет!";
    phrase2 = "Как дела?";
      alert(phrase1);
      alert(phrase2);
      var phrase1;
      let phrase2;
    }
sayHi(); //# Получим ошибку "Cannot access 'phrase2' before initialization"

Как видим, ошибка вызвана тем, что phrase2 не существует до её объявления. А вот такая же ситуация с phase1 компилятор никак не смущает. 
Переписав строку "let phrase2" на "var phrase2" увидим желаемые "Привет!" и "Как дела?".

Кстати, если мы объявим переемнную var внутри функции да и ещё внутри блока кода - ничего не поменяется, она так же будет считаться объявленной при старте функции.

Такое поведение называется "hoisting" - всплытие, т.к. все переменные, объявленные через var, "всплывают" в самый верх функции.

- VAR НЕ присваивается в начале запуска функции
Объявление переменных "всплывают", а вот присваивания им значений - нет!

Пример:
function sayHi() {
    alert(phrase);
    var phrase = "Привет!";
    }
sayHi(); //# Видим undefined

Получается, что переменная существует и объявлена уже с самого запуска функции.
НО значение ей будет присвоено В ТОМ МЕСТЕ КОДА, где она объявляется.
Т.О. переменные var обрабатываются в начале функции, но имеют значение "undefined".
Значения им присваиваются в конкретной строке.

- ИТОГО:

1) Var не имеют блочной области видимости. Они ограничены телом функции, или же телом скрипта.
2) Объявление переменных var производится при старте исполнения функции (или же скрипта).

Ещё одно, 3-е ОТЛИЧИЕ, роассмотрено в следующей теме.


