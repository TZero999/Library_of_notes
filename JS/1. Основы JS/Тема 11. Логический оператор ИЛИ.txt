В JavaScript есть четыре логических оператора:
|| (ИЛИ)
&& (И)
! (НЕ)

Ещё есть ?? (Оператор нулевого слияния). Здесь мы рассмотрим первые три.

В JS оператор ИЛИ работае не так, как в традиционных языках программирования и обладает дополнительными свойствами.

Пример простого применения ИЛИ:

let hour = 12;
let isWeekend = true;

if (hour < 10 || hour > 18 || isWeekend) {
  alert( 'Офис закрыт.' ); // это выходной
}

ИЛИ «||» НАХОДИТ ПЕРВОЕ ИСТИННОЕ ЗНАЧЕНИЕ.

result = value1 || value2 || value3;

Здесь Оператор || выполняет следующие действия:
1) Вычисляет операнды слева направо.
2) Каждый операнд конвертирует в логическое значение. Если результат true, останавливается и возвращает исходное значение этого операнда.
3) Если все операнды являются ложными (false), возвращает последний из них.

Если же ни одного верного значения нет - ИЛИ вернёт последнее значение.

Где мы можем применить такое свойство?
Представим, что у нас имеется ряд переменных, которые могут содержать данные или быть null/undefined. 
Как мы можем найти первую переменную с данными?
С помощью ||:

let currentUser = null;
let defaultUser = "John";
let name = currentUser || defaultUser || "unnamed";
alert( name ); // выбирается "John" – первое истинное значение

Если бы и currentUser, и defaultUser были ложными, в качестве результата мы бы наблюдали "unnamed".

Ещё это можно использовать для сокращённого вычисления:
Операндами могут быть как отдельные значения, так и произвольные выражения. ИЛИ || вычисляет их слева направо.
Вычисление останавливается при достижении первого истинного значения.
Этот процесс называется «сокращённым вычислением», поскольку второй операнд вычисляется только в том случае, если первого недостаточно
для вычисления всего выражения.

Пример:

let x;
true || (x = 1);
alert(x); // undefined, потому что (x = 1) не вычисляется. Если бы вместо true подставили false alert вернул бы 1-цу.

ИЛИ некая замена if. Чаще лучше использовать if.