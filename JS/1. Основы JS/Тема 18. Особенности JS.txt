1) JS обладает способностью автоматически вставлять точку с запятой в конце строки. Но срабатывает это не всегда:

alert("После этого сообщения ждите ошибку")
[1, 2].forEach(alert)

Поэтому лучше ставить точку с запятой вручную. НО (моё любимое) не стоит ставить её после блоков {...} и конструкций с ними.\
Это не критично, но так не делается.

2) СТРОГИЙ РЕЖИМ
Все скрипты лучше начинать с "use strict". 
Эта директива подключает возможности современного JS. Её следует размещать в первой строке скрипта или в начале тела функции.

Без "use strict" код также запустится, но некоторые возможности будут работать в «режиме совместимости» со старыми версиями языка JavaScript.
Нам же предпочтительнее современное поведение.

3) ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ:

Переменные можно объявить с помощью:
    let
    const ("постоянная переменная", не подлежит изменениям)
    var (устаревший способ объявления)

Имя переменной может включать:

    Буквы и цифры (но цифра не можеть быть первым символом!)
    Символы $ и _
    Иероглифи и символы нелатинского алфавита (хоть и делать так не стоит)

Существует 8 типов переменных:
- number
- bigint
- string
- boolean
- null
- undefined
- object и symbol

Оператор "typeof" позволяет узнать тип перменной (но null = object (это ошибка в языке) и тип функции - function).

4) Простейшие функции взаимодействия с посетителем:

- prompt.
Задаёт вопрос и возвращает ввод посетителя (или null, если посетитель нажал esc);
- confirm
Задаёт вопрос и предлагает нажать "Ок" или "Отмена". Возвращает true или false.
- alert 
Просто выводит сообщение.

Эти функции вызывают "Модальные окна". Они не позволяют взаимодействовать с интерфейсом страницы.

5) ОПЕРАТОРЫ

Операторы в JS бывают:

- Арифметические
Простые +, *, -, / и деление по модулю (%) c djpdtltybtv d cntgtym (**)
К слову, бинарный плюс + объединяет и строки. Если одним из операндов является строка - второй будет конвертирован в строку:

- Присваивания
Простые (a = b) и составные (a *= 2) 

- Битовые
См. тему 8, "Побитовые операторы".

- Условный
Единственный оператор с тремя параметрами (Condition ? Res_A : Res_B).

- Логические
Логические И, ИЛИ, НЕ (&&, ||, !). Логические И и ИЛИ возвращают значение, на котором остановились (Не обязательно true и false).
Логическое НЕ (!) конвертирует операнд в логический тип и возвращает инвертированное значение.

- Нулевого слияния
Оператор ?? - предоставляет способ выбора ОПРЕДЕЛЁННОГО значения. При A??B вернёт A, если оно не null/undefined.

- Сравнения
Проверка на равенство (==) - конвертирует значения в число. Другие операторы тоже конвертируют значения. 
Строгое сравнение (===) - ничего не конвертирует. Разные типы для него - это разные значения.
Операторы < и > сравнивают строки посимвольно, остальные типы конвертируют в число.

- Иные
Например, запятая (,).

6) ЦИКЛЫ:

Пока нами изучено 3 вида циклов:
- While () {}
- Do {...} while ()
- For () {...}

Здесь стоит помнить о директивах break/ continue, а также о "метках".

7) SWITCH

Конструкция switch заменяет несколько проверок if. При сравнении она использует оператор СТРОГОГО СРАВНЕНИЯ (===).
Так:

let age = prompt('Сколько вам лет?', 18);
switch (age) {
  case 18:
  alert("Так не сработает"); // результатом prompt является строка, а не число
  break;
  
  case "18":
  alert("А так сработает!");
  break;

default:
  alert("Любое значение, неравное значению выше");
}

8) ФУНКЦИИ

Вспомним три способа создания функций в JS:

- Function Declaration
Функция в основном потоке кода:  function sum(a, b) {let result = a + b; return result;}

- Function Expression
Функция как часть выражения: let sum = function(a, b) {let result = a + b; return result;}

- Стрелочные функции
let sum = (a, b) => {... ; return a + b;}

Важные особенности функций:
У функций могут быть локальные переменные: т.е. объявленные в теле функции. Такие переменные видимы только внутри функции.
У параметров могут быть значения по умолчанию: function sum(a = 1, b = 2) {...}.
Функции всегда что-нибудь возвращают. Если нет оператора return, результатом будет undefined.