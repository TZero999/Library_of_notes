Существует ещё один очень простой и лаконичный синтаксис для создания функций, который часто лучше, чем Function Expression: "Функции-стрелки".

Пример:

let sum = (a, b) => a + b; 

Эта стрелочная функция представляет собой более короткую форму:

let sum = function(a, b) {
  return a + b;
}
alert( sum(1, 2) ); // 3

Как вы можете видеть, (a, b) => a + b задаёт функцию, которая принимает два аргумента с именами a и b.
При выполнении она вычисляет выражение a + b и возвращает результат.

Если аргумент всего 1 - круглые скобки вокруг параметров можно опустить, запись станет ещё короче:

let double = n => n * 2;
// примерно тоже что и: let double = function(n) { return n * 2 }
alert( double(3) ); // 6

Аргументов может и вовсе не быть, но круглые скобки быть обязаны:

let sayHi = () => alert("Hello!");
sayHi();

Стрелочные функции можно использовать так же, как и Function Expression.
Например, для динамического создания функции:

let age = prompt("Сколько Вам лет?", 18);
let welcome = (age < 18) ?
  () => alert('Привет!') :
  () => alert("Здравствуйте!");
welcome();

МНОГОСТРОЧНЫЕ СТРЕЛОЧНЫЕ ФУНКЦИИ

Стрелочные функции, которые мы видели до этого, были очень простыми.
Они брали аргументы слева от => и вычисляли и возвращали выражение справа.

Иногда нам нужна более сложная функция, с несколькими выражениями и инструкциями.
Это также возможно, нужно лишь заключить их в фигурные скобки. 
НО надо помнить, что в таких ситуациях для возврата значения нужно использовать return (как в обычных функциях).

Пример:

let sum = (a, b) => {  // фигурная скобка, открывающая тело многострочной функции
    let result = a + b;
    return result; // если мы используем фигурные скобки, то нам нужно явно указать "return"
    };
alert( sum(1, 2) ); // 3