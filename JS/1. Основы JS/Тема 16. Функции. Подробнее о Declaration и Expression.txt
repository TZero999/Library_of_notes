Есть 2 способа объявления функций:

Function Declaration - то, как мы объявляли её ранее:
function sayHi() {
  alert( "Привет" );
}

Но существует второй способ - Function Expression
Данный синтаксис позволяет нам создавать новую функцию в середине любого выражения.
Это выглядит следующим образом:

let sayHi = function() {
  alert( "Привет" );
};

В итоге к нас есть переменная, которая получает в качестве значения новую функцию.
Поскольку создание функции происходит в контексте выражения присваивания (с правой стороны от =), это Function Expression.

Здесь мы сразу присваиваем её переменной, так что смысл этих примеров кода один и тот же: "создать функцию и поместить её в переменную sayHi".

ФУНКЦИЯ - это ЗНАЧЕНИЕ.

Независимо от того, как создана функция - она является значением. И в обоих примерах выше она хранится в переменной SayHi.

РАССМОТРИМ СИТУАЦИЮ:

function sayHi() {
  alert( "Привет" );
}
alert( sayHi ); // выведет сам код функции, т.к. после названия функции нет ().

Есть языки программирования, в которых любое упоминание функции приводит к её выполнению. В JS это работает иначе.
Как раз таки ИЗ-ЗА того, что ФУНКЦИЯ - это ЗНАЧЕНИЕ, мы можем обращаться с ней, КАК СО ЗНАЧЕНИЕМ.

Таким образом мы, например, можем скопировать функцию в другую переменную:

function sayHi() {   // (1) создаём функцию
  alert( "Привет" );
}
let func = sayHi;    // (2) копируем 
func(); // Привет     // (3) вызываем копию (работает)!
sayHi(); // Привет    //     эта тоже все ещё работает (почему бы и нет)

ИТАК, СРАВНИМ "FUNCTION DECLARATION" и "FUNCTION EXPRESSION":

СИНТАКСИС:

Function Declaration: функция объявляется отдельной конструкцией «function…» в основном потоке кода.
Function Expression: функция, созданная внутри другого выражения или синтаксической конструкции (Например, =).

Но более тонкое отличие в том, КОГДА функция СОЗДАЁТСЯ ДВИЖКОМ JS:
Function Expression создаётся, когда выполнение доходит до него, и затем уже может использоваться.
Function Declaration может быть ВЫЗВАНА РАНЬШЕ, ЧЕМ ОБЪЯВЛЕНА.

Т.О. движок JS перед выполнением скрипта ищет в нём Function Declaration и сразу же создаёт такие Функции.
После обработки всех Function Declaration начнётся выполнение самого скрипта.

Т.О. с "Function Declaration" такой код будет работать:

sayHi("Вася"); // Привет, Вася
function sayHi(name) {
  alert( `Привет, ${name}` );
}

А вот с "Function Expression" такое не прокатило бы, такой код вызовет ОШИБКУ:

sayHi("Вася"); // ошибка!
let sayHi = function(name) {  // (*) магии больше нет
  alert( `Привет, ${name}` );
};

ДОСТУПНОСТЬ ФУНКЦИЙ:

НО у "Function Declaration" есть недостаток: 
В строгом режиме (когда Function Declaration находится внутри блока {...}) - функция доступна ТОЛЬКО внутри этого блока.

Пример:

let age = prompt("Сколько Вам лет?", 18);
// в зависимости от условия объявляем функцию
if (age < 18) {
  function welcome() {
    alert("Привет!");
  }
} else {
  function welcome() {
    alert("Здравствуйте!");
  }
}
welcome(); // Error: welcome is not defined

Это произошло, так как объявление Function Declaration видимо только внутри блока кода, в котором располагается.

Что сделать, чтобы функция была видима снаружи блока {...} (В нашем случае снаружи блока if)?
Воспользоваться "Function Expression" и присвоить значение welcome() переменной, объявленной снаружи блока if{}.

Пример:

let age = prompt("Сколько Вам лет?", 18);
let welcome;

if (age < 18) {
  welcome = function() {
    alert("Привет!");
  };
} else {
  welcome = function() {
    alert("Здравствуйте!");
  };
}
welcome(); // теперь всё в порядке

Или, можно сократить запись с помощью условного оператора ?:

let age = prompt("Сколько Вам лет?", 18);
let welcome = (age < 18) ?
  function() { alert("Привет!"); } :
  function() { alert("Здравствуйте!"); };
welcome(); // теперь всё в порядке

ИТОГО:
1) Функции – это значения. Они могут быть присвоены, скопированы или объявлены в любом месте кода.
2) Если функция объявлена как отдельная инструкция в основном потоке кода, то это “Function Declaration”.
3) Если функция была создана как часть выражения, то это “Function Expression”.
4) Function Declaration обрабатываются перед выполнением {блока кода}. Они видны ВО ВСЁМ БЛОКЕ (но не снаружи).
5) Функции, объявленные при помощи Function Expression, создаются только когда поток выполнения достигает их.