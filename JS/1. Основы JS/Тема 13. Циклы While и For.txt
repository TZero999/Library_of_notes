Итак, разберём 3 вида простых циклов:

1) WHILE

Цикл while имеет следующий синтаксис:

while (condition) {
  // код
  // также называемый "телом цикла"
}

Цикл выполняется, пока условие истинно:

Например, цикл ниже выводит i, пока i < 3:
let i = 0;
while (i < 3) { // выводит 0, затем 1, затем 2
  alert( i );
  i++;
}

Одно выполнение тела цикла = 1 итерация.

2) DO... WHILE

do {
  // тело цикла
} while (condition);

Сначала выполняется тело цикла, затем проверяется условие. Пока условие = true цикл юудет выполняьбся снова и снова.

Используется редко, только когда тело цикло должно быть выполнено ХОТЯ БЫ 1 РАЗ.

3) FOR

Более сложный, но распространённый вид цикла

for (начало; условие; шаг) {
  // ... тело цикла ...
}

Пример:
Цикл ниже выполняет alert(i) для i от 0 до (но не включая) 3.

for (let i = 0; i < 3; i++) { // выведет 0, затем 1, затем 2
  alert(i);
}

Вот из чего состоит цикл FOR:

начало	let i = 0	Выполняется один раз при входе в цикл
условие	i < 3	Проверяется перед каждой итерацией цикла. Если оно вычислится в false, цикл остановится.
тело	alert(i)	Выполняется снова и снова, пока условие вычисляется в true.
шаг	i++	Выполняется после тела цикла на каждой итерации перед проверкой условия.

Стоит помнить, что переменная счётчика i, встроенная и объявленная в цикле, существует только внутри цикла.

ЛЮБУЮ ЧАСТЬ for можно опустить (но обязательно соблюдать расстановку точек с запятой):

let i = 0; // мы уже имеем объявленную i с присвоенным значением

for (; i < 3; i++) { // нет необходимости в "начале"
  alert( i ); // 0, 1, 2
}

АЛГОРИТМ РАБОТЫ FOR:

В целом, алгоритм работы цикла выглядит следующим образом:
Выполнить начало
→ (Если условие == true → Выполнить тело, Выполнить шаг)
→ (Если условие == true → Выполнить тело, Выполнить шаг)
→ (Если условие == true → Выполнить тело, Выполнить шаг)
→ ...
Это значит, что следующий код:
for (let i = 0; i < 5; i++) alert( i );
Выдаст нам значения от 0 до 4.

ПРЕРЫВАНИЕ ЦИКЛА BREAK:

Обычно цикл завершается сам, когда условие возвращает false.
Но мы можем выйти из цикла с помощью специальной директивы break.
Код внизу будет подсчитывать цифры до тех пор, пока пользователь их вводит:

let sum = 0;
while (true) {
  let value = +prompt("Введите число", '');
  if (!value) break; // (*)
  sum += value;
}
alert( 'Сумма: ' + sum );

Вообще, сочетание «бесконечный цикл + break» – отличная штука для тех ситуаций, когда условие, по которому нужно прерваться,
находится не в начале или конце цикла, а посередине или даже в нескольких местах его тела.

ПЕРЕХОД К СЛЕДУЮЩЕЙ ИТЕРАЦИИ CONTINUE:

Директива continue – «облегчённая версия» break. При её выполнении цикл не прерывается, а переходит к следующей итерации (если условие все ещё равно true).
Её используют, если понятно, что на текущем повторе цикла делать больше нечего.
Например, цикл ниже использует continue, чтобы выводить только нечётные значения:

for (let i = 0; i < 10; i++) {
  if (i % 2 == 0) continue; // если true, пропустить оставшуюся часть тела цикла
  alert(i); // Вернёт 1, затем 3, 5, 7, 9
}

С технической точки зрения вместо использования continue можно просто завернуть действия в блок if.
Однако мы получили дополнительный уровень вложенности фигурных скобок. Если код внутри if более длинный -
это ухудшает читаемость, в отличие от варианта с continue.

НЕЛЬЗЯ использовать break/continue справа от оператора „?“

Пример:
(i > 5) ? alert(i) : continue; // continue здесь приведёт к ошибке

Это ещё один повод не использовать оператор вопросительного знака ? вместо if.

МЕТКИ для BREAK/ СONTINUE:

Бывает нам необходимо выйти сразу из нескольких уровней цикла.

Например, в коде ниже мы проходимся циклами по i и j, запрашивая с помощью prompt координаты (i, j) с (0,0) до (2,2):
for (let i = 0; i < 3; i++) {
  for (let j = 0; j < 3; j++) {
    let input = prompt(`Значение на координатах (${i},${j})`, '');
    // Что если мы захотим перейти к Готово (ниже) прямо отсюда?
  }
}
alert('Готово!');

Вдруг пользователь отменит ввод? Обычный break прервёт лишь внутренний цикл.
Тогда используют метки:

Метка имеет вид идентификатора с двоеточием перед циклом:

labelName: for (...) {
  ...
}

outer: for (let i = 0; i < 3; i++) {
  for (let j = 0; j < 3; j++) {
    let input = prompt(`Значение на координатах (${i},${j})`, '');
    // если пустая строка или Отмена, то выйти из обоих циклов
    if (!input) break outer; // (*)
    // сделать что-нибудь со значениями...
  }
}

alert('Готово!');

В примере выше это означает, что вызовом break outer будет разорван внешний цикл до метки с именем outer.
Таким образом управление перейдёт со строки, помеченной (*), к alert('Готово!').

ИТОГО
Мы рассмотрели 3 вида циклов:
while – Проверяет условие перед каждой итерацией.
do..while – Проверяет условие после каждой итерации.
for (;;) – Проверяет условие перед каждой итерацией, есть возможность задать дополнительные настройки.

Чтобы организовать бесконечный цикл, используют конструкцию while (true).
 При этом он, как и любой другой цикл, может быть прерван директивой break.

Если на данной итерации цикла делать больше ничего не надо, но полностью прекращать цикл не следует – используют директиву continue.

Обе этих директивы поддерживают метки, которые ставятся перед циклом.
Метки – единственный способ для break/continue выйти за пределы текущего цикла, повлиять на выполнение внешнего.

Заметим, что метки не позволяют прыгнуть в произвольное место кода, в JavaScript нет такой возможности.