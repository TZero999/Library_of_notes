В том случае, если в выражении есть несколько операторов – порядок их выполнения определяется приоритетом,
или, другими словами, существует определённый порядок выполнения операторов.

В JavaScript много операторов. Каждый оператор имеет соответствующий номер приоритета. Тот, у кого это число больше, – выполнится раньше.
Если приоритет одинаковый, то порядок выполнения – слева направо.

Отрывок таблицы приоритетов:

Приоритет:      Название:               Обозначение:
15	            унарный плюс	            +
15	            унарный минус	            -
14	            возведение в степень	    **
13	            умножение	                *
13	            деление	                    /
12	            сложение	                +
12	            вычитание	                -
2	            присваивание	            =

Почему у присваивания такой малый приоритет? Всё просто: математические операторы должны выполниться перед тем, как присвоить значение переменной.

Присваивание (=) - это тоже оператор. Большинство операторов в JavaScript возвращают значение.
 Для некоторых это очевидно, например сложение + или умножение *.  Но и оператор присваивания не является исключением.
Пример такого применения:
let a = 1; let b = 2;
let c = 3 - (a = b + 1);
alert( a ); // 3
alert( c ); // 0

Но так лучше не делать, это делает код менее читабельным.

Присваивание по цепочке:
let a, b, c;
a = b = c = 2 + 2;
alert( a ); // 4
alert( b ); // 4
alert( c ); // 4
Такое присваивание работает справа налево.

Но это опять таки плохой пример, усложняющий прочтение кода на лету.

Сокращённая арифметика - вызов с присваиванием:
let n = 2;
n += 5; // n = n + 5 = 7
n *= 2; // n = n * 2 = 14
n /= 7; // n = n / 7 = 2
n -= 2; // n = n - 2 = 0

НО вызов с присваиванием имеет приоритет, как и само присваивание (2). Отсюда:

let n = 2;
n *= 3 + 5; // n = n * 8 = 16

Операторы инкремента и декремента могут использоваться внутри выражения. Их приоритет выше, чем у большинства других арифметических операций.

Пример:
let counter = 1;
alert( 2 * ++counter ); // 4

Запятая имеет приоритет 1. Он очень мал (ниже, чем у присваивания), поэтому следует использовать её с осторожностью.

Условный (тернарный оператор) ? имеет низкий приоритет.

Приоритет оператора И && больше, чем ИЛИ ||, так что он выполняется раньше.

Приоритет НЕ ! является наивысшим из всех логических операторов, поэтому он всегда выполняется первым, перед && или ||.