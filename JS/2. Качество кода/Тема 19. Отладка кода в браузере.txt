Отладка – это процесс поиска и исправления ошибок в скрипте.
Инструменты разработчика внутри браузера позволяют по шагам отследить, что именно происходит в нашем коде.

Используем тестовую страницу:
https://learn.javascript.ru/article/debugging-chrome/debugging/index.html

1) ПАНЕЛЬ SOURCES ("Исходный код"):

Интерфейс sources состоит из 3 зон:
1 - Левая зона "File Navigator". Показывает HTML, JavaScript, CSS, IMG файлы. Здесь же можно найти файлы различных расширений Chrome.
2 - Зона Code Editor (редактор кода) показывает исходный код.
3 - Наконец, зона JavaScript Debugging (панель отладки JavaScript) отведена для отладки, скоро мы к ней вернёмся.

2) КОНСОЛЬ

Консоль можно вызывать нажатием ESC в различных вкладках. Также у консоли есть своя собственная вкладка Console.
Консоль позволяет вводить команды напрямую.

3) ТОЧКИ ОСТАНОВА ("Breakpoints"):

Во вкладке sources жмём на цифру, показывающую строку кода - ставим точку останова.
Точки останова – участки кода, где дебаггер автоматически приостановит исполнение JavaScript.

Пока исполнение скрипта на паузе, мы можем просматривать значения переменных, выполнять команды в консоли и т.д.

Меню "Breakpoints" в правой зоне вкладки Sources отображает все точки останова во всех файлах.
Также это меню позволяет:

1 - Быстро пеерходить к точке остонова (ЛКМ по точке останова).
2 - Временно отключить точку останова (ЛКМ по рамке с галочкой).
3 - Удалить точку останова (ПКМ + Remove).
И многое другое.

Можно поставить "УСЛОВНУЮ ТОЧКУ ОСТАНОВА". Делается это щелчком ПКМ по номеру строки кода.
Такая точка срабатывает только тогда, когда выражение (которое вы определяете при создании такой точки) истинно.
Удобно использовать этот трюк, когда нам нужно остановить скрипт при определённом значении переменной или параметров функции.

КОМАНДА "DEBUGGER":
Кстати, выполнение кода можно приостановить сразу из кода, посредством команды debugger;
Такая команда срабатывает только если открыты инструменты разработки. А иначе браузер ее проигнорирует.

Управление точками останова:
F8 - переход к следующей точке останова;
F9 - выполнение следующей инструкции - пошаговое изучение кода.
F10 - Выполняет следующую команду, если она не является функцией. Нужна, если нам не интересно то, что происходит внутри вызова функции.
F11 - Игнорирует асинхронные вызовы (Типа setTimeout - вызов функции по расписанию).
Shift+F11 - Продолжает выполнение и останавлиается в последней строке текущей функции. Удобно, если случайно вошли в вызов функции и хотим пропустить его.

"Continue to here"
ПКМ по строке кода открывает контекстное меню с отличной опцией «Continue to here» («продолжить до этого места»).
Это удобно, когда мы хотим перейти на несколько шагов вперёд к строке, но лень устанавливать точку останова (breakpoint).

4) ИТОГО:

Итого
Приостановить выполнение скрипта можно тремя способами:
- Точками останова (breakpoints).
- Использованием в коде команд debugger.
- При ошибке (если инструменты разработчика открыты и кнопка в виде значка паузы активна).

При остановке мы можем анализировать переменные и пошагово пройти по процессу, чтобы отыскать проблему.

В инструментах разработчика гораздо больше опций, чем описано здесь.
С полным руководством можно ознакомиться на https://developers.google.com/web/tools/chrome-devtools.
Информации из этой главы достаточно, чтобы начать отладку, но позже, особенно если вы много работаете с браузером,
пожалуйста, перейдите туда и ознакомьтесь с расширенными возможностями инструментов разработчика.

И, конечно, вы можете просто кликать по различным местам инструментов разработки и смотреть, что при этом появляется.
Пожалуй, это наискорейший способ ими овладеть. Не забывайте про правый клик мыши и контекстные меню!