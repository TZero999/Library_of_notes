Хорошие комментарии:

1) Описывают структуру:

Сделайте высокоуровневый обзор компонентов, того, как они взаимодействуют, каков поток управления в различных ситуациях…
Если вкратце – обзор кода с высоты птичьего полёта.
Существует специальный язык UML для создания диаграмм, разъясняющих архитектуру кода. Его определённо стоит изучить.

2) Документируют параметры и использование функций:

Есть специальный синтаксис JSDoc для документирования функций:
Её использования, параметров, возвращаемых значений.
Например:

/**
 * Возвращает x, возведённое в n-ную степень.
 *
 * @param {number} x Возводимое в степень число.
 * @param {number} n Степень, должна быть натуральным числом.
 * @return {number} x, возведённое в n-ную степень.
 */
function pow(x, n) {
  ...
}

Подобные комментарии позволяют нам понимать назначение функции и правильно её использовать без необходимости заглядывать в код.
Многие редакторы JS кода споосбны распознавать такой синтаксис документирования.

3) Почему задача решена именно таким способом?

Важно то, что написано. Но то, что не написано - порой важнее. 
Почему задача решена именно этим способом? Код не даёт ответа.

Если есть несколько способов решить задачу, то почему вы выбрали именно этот? Особенно если ваш способ – не самый очевидный.
Без подобных комментариев возможна следующая ситуация:

Вы/ ваш коллега открываете написанный некоторое время назад код и видите, что в нём есть, что улучшить.
Вы думаете: «Каким глупым я раньше был и насколько умнее стал сейчас».
Переписываете его на «более правильный и оптимальный» вариант.

В процессе вы понимаете, что «оптимальное» решение на самом деле не такое уж и оптимальное.
Вы даже смутно припоминаете, почему написали этот код именно так, а не иначе.
Вы возвращаетесь к первоначальному варианту, потратив время зря.
Комментарии, объясняющие решение, очень важны. Они помогают продолжать разработку в правильном направлении.