Код должен быть максимально читаемым и понятным.

Искусство программирования заключается в следующем:
Взять сложную задачу и написать такой код для её решения, который и правильно работает, и легко читается, и понятен для людей.
Для этого нужен хороший стиль написания кода. У хорошего кода есть несколько "столпов":

1) СИНТАКСИС
Вот несколько важных правил, НЕ являющихся ДОГМАМИ:
- Отсутствие пробелов между именем функции и скобками;
- Отсутствие пробелов между скобками и параметрами функции;
- Пробелы между параметрами функции;
- Фигурная скоба { на той же строке, что и её инструкция;
- Не забывать лишний раз использовать точку с запятой;
- Отступ в 2 пробела внутри блоков;
- Пробел после for/if/while и т.д.;
- Пустая строка между логическими блоками;
- Пробелы между аргументами функции;
- Пробелы вокруг операторов;
- Не очень длинные строки;
- } else { без перевода строк;
- Пробелы вокруг вложенных вызовов.

Картинка с примером:
<src="./Пример хорошего стиля кода.png">

2) ФИГУРНЫЕ СКОБКИ:

В большинстве JavaScript проектов фигурные скобки пишутся в так называемом «египетском» стиле с открывающей скобкой на той же строке,
что и соответствующее ключевое слово – не на новой строке.
Перед открывающей скобкой должен быть пробел.

А если запись однострочная? Как, например, тут:
if (condition) doSomething()

Лучший вариант - всё равно использовать фигурные скобки и оформить их следующим образом:
if (n < 0) {
    alert(`Степень ${n} не поддерживается`);
}

Да, допустимо написать это в одну строку без скобок: if (n < 0) alert(`Степень ${n} не поддерживается`);
Но блок кода (огороженный {}) всё равно читается лучше.

3) ДЛИННЫЕ СТРОКИ:

Тут всё просто. Длинные строки лучше разбивать на несколько. Вот, пример, для if:

if (
    id === 123 &&
    moonPhase === 'Waning Gibbous' &&
    zodiacSign === 'Libra'
  ) {
    letTheSorceryBegin();
}

Максимальную длину строки индивидуально согласовывают команды, но обычно это от 80 до 120 символов.

4) ОТСТУПЫ:

Есть 2 типа отступов: горизонтальные и вертикальные:

- Горизонтальные отступы в 2 или 4 пробела:
Количество пробелов (2 или 4) - на ваше усмотрение. Возможна и табуляция TAB.
Но пробелы распространены больше, т.к. пробелы позволяют более гибко конфигурировать отступы. 
Например, чтобы выровнять параметры функции:

show(parameters,
     aligned, // 5 пробелов слева
     one,
     after,
     another
 ) {
 // ...
}

- Вертикальные отступы для разбивки кода на логические блоки:
Даже одну функцию порой лучше разбить на логические блоки:

function pow(x, n) {
    let result = 1;
    //              <--
    for (let i = 0; i < n; i++) {
      result *= x;
    }
    //              <--
    return result;
}

Вставляйте дополнительный перевод строки туда, где это сделает код более читаемым.
НЕ ДОЛЖНО БЫТЬ БОЛЕЕ 9 строк кода ПОДРЯД без вертикального отступа.

5) ТОЧКА С ЗАПЯТОЙ:

Точки с запятой должны присутствовать после каждого выражения, даже если их, казалось бы, можно пропустить.
Есть языки, в которых точка с запятой необязательна и редко используется, но в JS всё иначе.
К тому же бывает, что перенос строки не интерпретируется, как точка с запятой.
Это может привести к ошибке или неправильной логике работы скрипта.

Если вы – опытный разработчик на JavaScript, то можно выбрать стиль кода без точек с запятой, например StandardJS.
В ином случае, лучше будет использовать точки с запятой, чтобы избежать подводных камней. 
Большинство разработчиков их ставят.

6) УРОВНИ ВЛОЖЕННОСТИ:

Уровней вложенности должно быть немного.
Например, в цикле бывает полезно использовать директиву continue, чтобы избежать лишней вложенности.
Или же ситуации с if/else и return:

function pow(x, n) {
    if (n < 0) {
      alert("Отрицательные значения 'n' не поддерживаются");
    } else {
      let result = 1;
  
      for (let i = 0; i < n; i++) {
        result *= x;
      }
  
      return result;
    }
}

Вместо строки  "else {" можно написать "return;}" и продолжить код с "let result = 1;"

Такой вариант будет более читабельным, потому что «особый случай» n < 0 обрабатывается на ранней стадии.
После проверки можно переходить к «основному» потоку кода без необходимости увеличения вложенности.

7) РАЗМЕЩЕНИЕ ФУНКЦИЙ:

Если вы пишете несколько вспомогательных функций, а затем используемый ими код, то существует три способа организации функций:

- Объявить функции ПЕРЕД кодом, который их вызывает;
- Сначала написать код, затем функции;
- Объявлять функцию там, где она впервые используется.

В большинстве случаев предпочтителен второй вариант.
Это объясняется тем, что при чтении кода первым делом хочется понять, что он делает.
Если вначале будет идти код - это будет сразу же понятно. И тогда нам может не понадобиться читать функции.

8) ИТОГО:

Все правила синтаксиса, описанные в этой главе (и в ссылках на руководства по стилю),
направлены на повышение читаемости вашего кода. И о любых можно поспорить.

Когда мы думаем о написании «лучшего» кода, мы должны задать себе вопросы:
«Что сделает код более читаемым и лёгким для понимания?»
«Что может помочь избегать ошибок?».
Это – основные моменты, о которых следует помнить при выборе и обсуждении стилей кода.

Чтение популярных руководств по стилю позволит вам быть в курсе лучших практик и последних идей и тенденций в стилях написания кода.