* Ecma-262 - это стандарт, представляющий собой спецификацию скриптового языка.
"ECMA-262 = ECMAScript 2017 Language Specification, 8-ое издание (июнь 2017)".

* СКРИПТОВЫЙ ЯЗЫК
"Скриптовый язык - это язык, созданный для работы с существующим объектом или системой"
Как язык программирования вдруг становится скриптовым?
Тут всё относительно просто. У скриптового языка есть действующее лицо. 
Так, команды "ходить", "бегать", "прыгать" имеют для нас мало смысла, если нет объекта, выполняющего эти действия.

Таким образом, скриптовый язык предназначен для управления внешним объектом.

* Примеры скриптовых языков: 
AutoHotkey, sh (bash, csh, ksh), AppleScropt, VBScript, PowerShell, AutoLISP, ECMAScript, MQL4, VBA, 1C:предприятие,
PHP, Lua, Python, Ruby, Perl. Это - не все примеры, но самые распространённые из них.

* ECMAScript
Как было сказано выше: "EcmaScript - это описанная в ECMA-262 спецификация создания скриптового языка общего назначения"

Т.О. ECMA-262 - это название и стандарта, и спецификации языка ECMAScript.

Сам ECMAScript содержит правила, рекомендации и сведения, которые обязаны быть соблюдены скриптовым языком, чтобы он считался совместимым с ECMAScript.

* За что отвечает ECMAScript?
Синтаксис языка - правила парсинга, ключевые слова, операторы и т.д.;
Типы - Числа, строки, объекты и т.д.;
Прототипы и наследования;
Стандартную библиотеку встроенных объектов и функций - JSON, Math и т.д.

* JavaScript
JavaScript - это скриптовый язык общего назначения, соответствующий спецификации ECMAScript.
Т.О. JavaScript - это ЖИАЛЕКТ языка ECMAScript.

Так, из документации ECMAScript можно узнать, как создать новый скриптовый язык.
Из документации JavaScript - как использовать уже существующий скриптовый язык.

Можно взглянуть на ситуацию ещё и со стороны понятия "Диалект"
Диалекты английского, французского и других языков берут свой лексикон и синтаксис из родительского языка, но всё же отличается от него.

* JavaScript-интерпретаторы
Интерпретатор - программа, способная понимать и выполнять код.

JS-движки обычно используются в веб-браузерах, включая V8 Chrome, SpiderMonkey Firefox, Chacra Edge и т.д.
Каждый движок подобен языковому модулю, корторый позволяет приложению поддерживать определённое подмножество языка JS.

Не будет движка JS в браузере - браузер не будет понимать JS-скрипты.

* Появление новой версии ECMAScript не означает, что все движки JS получат новые функции.
Всё зависит от организаций и групп, отвечающих за обновление JS-движков.

потому разработчики, как правило, спрашивают именно "Какую версию ECMAScript поддерживает данный браузер?".

* Среда выполнения JS - это существующий объект или система, упомянутые в определении скриптового языка.
Код проходит через движок (в котором объект или система анализирует код и разбирает его работу), который затем выполняет интерпретированные действия.
JS-скрипты могут обращаться к приложениям, потому что те представляют собой "хост-объекты" в среде выполнения.


* Хост-среда:
На клиентской стороне стороне средой выполнения скриптов будет веб-браузер. В них хост-объектами являются окна и HTML-документы.
Причём окна и документы не являются частью базового JS. Это веб-API, объекты, предоставляеиые браузером, действующим как хост-среда JS.

На серверной стороне среда выполнения JS - это Node.js. В Node предоставляются связанные с сервером хост-объекты, такие как файловая система, процессы и запросы.

Разные среды выполнения JS могут использовать один и тот же JS-движок.
Так, V8 используется и в Google Chrome, и в Node.js

* ECMAScript 6
ES6 - это шестая редакция стандарта ECMA-262, внёсшая в спецификацию ECMAScript существенные изменения и улучшения.
Синонимы: ES6, ES2015, ECMAScript 2015.

С 2015 года компания Ecma International перешла на ежегодные релизы ECMAScript и эту версию переименовали с ES6 на ES2015.
После этого Ecma International стала называть версии ECMAScript в соответствии с годом выпуска.

* Babel
Babel - это транспилятор. Он нужен для конвертации кода ES6 в код ES5.
ES6 предоставил разработчикам уйму новых возможностей, но, как и было сказано ранее, движки JS (а, следовательно, и браузеры) не моментально
добавляют поддержку функций новых спецификаций.

В таком случае разработчики могут преобразовать (транспилировать) код ES6 в функционально эквивалентную версию, использующую функции только ES5.
Все основные браузеры полностью поддерживают ES5, поэтому транспилированный код будет работать без нареканий.