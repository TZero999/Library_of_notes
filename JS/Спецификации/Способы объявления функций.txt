Первые 2 способы наиболее распространены и известны нам:
Function Declaration и Function Expression

Разница между ними отображена в примере ниже:
{
    alert("24 is even number?", isEven(24));  // => true
alert("11 is even number?", isEven(11));  // => false
function isEven(num) {
  return num % 2 === 0;
}

isOdd = function(num) {
  return num % 2 !== 0;
}
alert('\n');
alert("14 is odd number?", isOdd(14));   // => false
alert("101 is odd number?", isOdd(101)); // => true
}

* Function Declaration
Синтаксис: function isEven(num) {...}

Особенность: объявление этой функции создаёт переменную в текущей области видимости с идентификатором,
равным имени функции. Эта переменная содержит в себе объект функции.

Функция может быть вызвана ДО ОБЪЯВЛЕНИЯ, т.к. происходит её поднятие вверх текущей области видимости.

Отличие от функциональных выражений или стрелочных функций в том,
что те не создают привязку к переменной функции по ее имени.

Стоит запомнить, что Function Declaration всегда начинается со слова function.
Слово "function" вначале? Тогда перед нами "Объявление функции = Function Decratation".

* Function Expression
СинтаксисЖ isOdd = function(num) {...}

При объявлении функционального выражения слово "function" находится в середине строки.

В СТРОГОМ РЕЖИМЕ если объявлять функцию посредством Function Declaration в блоке кода с условными
операторами if, for или while получим ошибку "ReferenceError: variable is not defined".

В данном случаем нас выручит объявление функционального выражения.

Пример:{
    (function() {
        'use strict';
        let ok;
        if (true) {
          ok = function() {
            return 'true';
          }
        } else {
          ok = function() {
            return 'false';
          }
        }
        console.log(typeof ok === 'undefined');  // => true
        console.log(ok());  // => 'true'
      })();
}

функциональным выражениям можно не давать имя, но тогда мы теряем следующие преимущества:
1: Сообщения об ошибках и консольные вызовы показывают более подробную информацию 
при использовании имен функций;
2: Более удобная отладка за счет уменьшения количества анонимных имен стека;
3: Название функции говорит о том, что функция делает;
4: Вы можете получить доступ к функции внутри ее области для рекурсивных вызовов или
отключения прослушивателей событий.

Поэтому разумно отдавать предпочтение именованным функциям и избегать анонимных.

* Сокращенное определение метода
* Стрелочная функция
* Функция-генератор
* Использование new Function.
Созданные таким образом функции не имеют доступа к текущей области видимости, 
поэтому замыкания не могут быть созданы. Они всегда создаются в глобальной области.

Одно из возможных лучших применений new Function - доступ к глобальному объекту в браузере 
или скрипте NodeJS: {
    (function() {
        'use strict';
        const global = new Function('return this')();
        console.log(global === window);  // => true
        console.log(this === window);  // => false
     })();
}

* Правила выбора способа объявления функции:

Функция использует this из замывающей функции? Используем стрелочную функцию.
Функция обратного вызова имеет 1 короткий оператор? Опять стрелочная функция.
Нужен краткий синтаксиса при объявлении методов в объектных литералах? Сокращенное объявление.

new Function не следует использовать для объявления функций. В основном потому,
что он открывает потенциальные угрозы безопасности, не позволяет выполнять автозаполнение кода 
в редакторах и теряет оптимизацию движка.