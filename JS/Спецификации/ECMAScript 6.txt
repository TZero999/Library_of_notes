Нововведения в ES6:

* Итераторы:
В ES5 существовали только операторы "for" и "for-in".
С for-in было много проблем. Самая большая состояла в отсутствии гарантии последовательности.

Поэтому в ES6 был добавлен цикл "for-of"
Это - новый синтаксис в ES6:
for (var key of table) {
    console.log(key + ' = ' + table[key]);
}
Такое применение будет гарантировать нам последовательность ключей.

* Свойство объекта с ключом "Symbol.iterator"
Чтобы объект был итерируемым он должен иметь свойство с ключом "Symbol.iterator".
Это свойство с ключом "Symbol.iterator" - ещё одно дополнение в ES6.
Именно его использует наш for-of.

Элемент объекта table [Symbol.iterator] должен быть функцией, которая соответствует протоколу итераторов,
то есть она должна возвращать объект следующим образом: { next: function () {}}.

Каждый раз, когда for-of вызывает next, сама функция next должна возвращать объект вида {value: …, done: [true/false] }.

Полная реализация:
table[Symbol.iterator] = function () {
    var keys = Object.keys(this).sort();
    var index = 0;
    
    return {
      next: function () {
        return {
          value: keys[index], done: index++ >= keys.length
        };
      }
    }
}

В чём разница for-in и for-of?
for-of выдаёт значения, которые есть в массиве, а все остальные свойства опускает.
Это происходит в следствии того, что итератор массива возвращает только ожидаемые параметры.

Пример:
var list = [3, 5, 7];
list.context = 'bar';

//# Используем for-in
for (var key in list) {
  console.log(key); //# 0, 1, 2, context
}
 
//# Теперь используем for-of
for (var key of list) {
  console.log(key); //# 3, 5, 7
}