# Пример внешнего вида цепочки промисов:
{
    new Promise(function(resolve, reject) {

        setTimeout(() => resolve(1), 1000); // (*)
      
      }).then(function(result) { // (**)
      
        alert(result); // 1
        return result * 2;
      
      }).then(function(result) { // (***)
      
        alert(result); // 2
        return result * 2;
      
      }).then(function(result) {
      
        alert(result); // 4
        return result * 2;
      
      });
}

Идея в передачи результата от первого промиса каждому последующему с помощью метода .then.

# Поток выполнения цепочки промисов выше:
1: Начальный промис успешно выполняется через 1 секунду (*),
2: Затем вызывается обработчик в .then (**).
3: Возвращаемое им значение передаётся дальше в следующий обработчик .then (***) и т.д.

- Классическая ошибка новичков - оформление "цепочки", когда все обработчики получают результат промиса:
{
Технически возможно добавить много обработчиков .then к единственному промису. Но это не цепочка.

# Пример того, как НЕ НАДО оформлять цепочку вызовов: 
{
let promise = new Promise(function(resolve, reject) {
        setTimeout(() => resolve(1), 1000);
    });
    
    promise.then(function(result) {
        alert(result); // 1
        return result * 2;
    });
    
    promise.then(function(result) {
        alert(result); // 1
        return result * 2;
    });
    
    promise.then(function(result) {
        alert(result); // 1
        return result * 2;
});
}

Здесь несколько обработчиков then добавлено к одному промису, но они НЕ передают результат друг другу
по цепочке. Они действуют независимо друг от друга.

В итоге все обработчики получат одно и то же значение - результат выполнения промиса.
По итогу все обработчики дадут результат "1" по выполнению промиса.

На практике иногда приходится добавлять одному промису несколько обработчиков,
но цепочка используется куда чаще.
}

# Пример работы с промисами в случае загрузчика скриптов loadScript:
{
    loadScript("/article/promise-chaining/one.js")
  .then(function(script) {
    return loadScript("/article/promise-chaining/two.js");
  })
  .then(function(script) {
    return loadScript("/article/promise-chaining/three.js");
  })
  .then(function(script) {
    # вызовем функции, объявленные в загружаемых скриптах,
    # чтобы показать, что они действительно загрузились:
    one();
    two();
    three();
  });
}

# Этот же код можно сильно минимизировать с помощью стрелочных функций:
{
    loadScript("/article/promise-chaining/one.js")
  .then(script => loadScript("/article/promise-chaining/two.js"))
  .then(script => loadScript("/article/promise-chaining/three.js"))
  .then(script => {
    # скрипты загружены, мы можем использовать объявленные в них функции
    one();
    two();
    three();
  });
}

В итоге каждый вызов скрипта loadScript загружает следующий с помощью обработчика.
Так скрипты загружаются один за другим.

# Вариант с ростом вправо:
{
    loadScript("/article/promise-chaining/one.js").then(script1 => {
        loadScript("/article/promise-chaining/two.js").then(script2 => {
          loadScript("/article/promise-chaining/three.js").then(script3 => {
            // эта функция имеет доступ к переменным script1, script2 и script3
            one();
            two();
            three();
          });
        });
      });

Здесь мы добавляем обработчик к loadScript-у каждый раз после выполнения предыдущего скрипта.
Но тут код растёт вправо и хоть он и рабочий, лучше так не делать.
}

.then порой лучше добавлять напрямую - так он будет иметь доступ к внешней области видимости.


