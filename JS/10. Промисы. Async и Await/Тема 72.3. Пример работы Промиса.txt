Берём функцию loadScript для загрузки скрипта из 71-ой главы.

Вариант с колбэками:
    function loadScript(src, callback) {
    let script = document.createElement('script');
    script.src = src;

    script.onload = () => callback(null, script);
    script.onerror = () => callback(new Error(`Ошибка загрузки скрипта ${src}`));

    document.head.append(script);
}

Переписываем её, используя Promise:
    function loadScript(src) {
    return new Promise(function(resolve, reject) {
        let script = document.createElement('script');
        script.src = src;

        script.onload = () => resolve(script);
        script.onerror = () => reject(new Error(`Ошибка загрузки скрипта ${src}`));

        document.head.append(script);
    });
}

Новой функции loadScript более не нужен аргумент callback.
Вместо этого она будет создавать и возвращать объект Promise,
который перейдет в состояние «успешно завершён», когда загрузка закончится.
Внешний код добавляет обработчики («подписчиков») методом .then.

Пример применения:
    let promise = loadScript("https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.11/lodash.js");
    promise.then(
    script => alert(`${script.src} загружен!`),
    error => alert(`Ошибка: ${error.message}`)
    );

promise.then(script => alert('Ещё один обработчик...'));

# Преимущества Promise:
1: Естественный порядок вещей: 
Сперва запускаем loadScript(script), затем в (.then) мы пишем, что делать с результатом.

2: Мы можем вызывать .then у Promise столько раз, сколько захотим.
Каждый раз мы добавляем нового «слушателя», новую функцию-подписчика.