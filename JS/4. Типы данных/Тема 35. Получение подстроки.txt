В JavaScript есть 3 метода для получения подстроки: substring, substr и slice.

1) str.slice (start [, end]) - возвращает ЧАСТЬ СТРОКИ от START до END (НЕ ВКЛЮЧИТЕЛЬНО!)
Пример:

let str = "stringify";
alert( str.slice(0, 5) ); // вернёт нам 'strin', символы от 0 до 5 (не включая 5)
alert( str.slice(0, 1) ); // 's', от 0 до 1, не включая 1, т. е. только один символ на позиции 0

end - необязательный аргумент. Если он отсутствует - slice возвращает символы до конца строки:

let str = "stringify";
alert( str.slice(2) ); // ringify, с позиции 2 и до конца

start/end у SLICE может воспринимать ОТРИЦАТЕЛЬНЫЕ ЗНАЧЕНИЯ.
Это означает, что позиция определена как заданное количество символов с конца строки.
Пример:

let str = "stringify";
alert( str.slice(-4, -1) ); // gif - начали с позиции 4 справа, а заканчиваем на позиции 1 справа

КСТАТИ, поменяв значения местами: str.slice(-1, -4) получим пустую строку.
Так же и с  str.slice(5, 0). 
То бишь инвертировать так строку мы не можем. 

2) str.substring(start [, end]) - Возвращает ЧАСТЬ СТРОКИ МЕЖДУ START и END (НЕ ВКЛЮЧАЯ end).

Это — почти то же, что и slice, но МОЖНО ЗАДАВАТЬ START БОЛЬШЕ END.
Start больше End? Метод просто "поменяет" их местами (поменяет в своей логике, не по факту).
Пример:

let str = "stringify";
alert( str.substring(2, 6) ); // "ring"
alert( str.substring(6, 2) ); // "ring"

Отрицательные значения substring, в отличие от slice, не поддерживает, они интерпретируются как 0.

3) str.substr(start [,length]) - возвращает часть строки ОТ START ДЛИННОЙ LENGTH.

В противоположность предыдущим методам, этот позволяет указать длину вместо конечной позиции:

let str = "stringify";
alert( str.substr(2, 4) ) // ring, получаем 4 символа, начиная с позиции 2

ЗНАЧЕНИЕ ПЕРВОГО АРГУМЕНТА МОЖЕТ БЫТЬ ОТРИЦАТЕЛЬНЫМ.
Тогда позиция определяется с конца:

let str = "stringify";
alert( str.substr(-4, 2) ); // gi, получаем 2 символа, начиная с позиции 4 с конца строки

- ИТОГ:

    метод	                      выбирает…	                                отрицательные значения
slice(start, end)	    от start до end (не включая end)	        можно передавать отрицательные значения
substring(start, end)	      между start и end	                    отрицательные значения равнозначны 0
substr(start, length)	length символов, начиная от start	        значение start может быть отрицательным

КАКОЙ МЕТОД ВЫБИРАТЬ?

Все они эффективны. 
Формально метод substr менее предпочтителен, т.к. он описан не в собственно спецификации JavaScript, а в приложении к ней — Annex B.
Это приложение описывает возможности языка для использования в браузерах, существующие в основном по историческим причинам. 

Т.О в окружении, отличном от браузера метод substr может не поддерживаться, но на практике ОН РАБОТАЕТ ВЕЗДЕ.

Из двух других вариантов, slice более гибок, он поддерживает отрицательные аргументы, и его короче писать.
Так что, в принципе, можно запомнить только его.