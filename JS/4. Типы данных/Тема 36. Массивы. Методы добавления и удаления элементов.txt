Проблема объектов - невозможность адекватно упорядочить данные.
У них нет методов управления порядком элементов, вставить новое свойсвто "между" другими - невозможно.
Да и такой функционал никогда не был предусмотрен для объектов.

Для хранения упорядоченных коллекций существует структура данных "Массив" - Array.

- Объявление массива:

Пустой массив можно создать двумя способами:

1) let arr = new Array();
2) let arr = [];

На практике почти всегда используется второй вариант. 
В [] можно указывать начальные значения элементов:
let fruits = ["Яблоко", "Апельсин", "Слива"];

Элементы массива нумеруются с 0. Можно получить элемент массива, указав в [] номер элемента:
let fruits = ["Яблоко", "Апельсин", "Слива"];
alert( fruits[0] ); // Яблоко
alert( fruits[1] ); // Апельсин
alert( fruits[2] ); // Слива

Элементы массива можно заменять:
fruits[2] = 'Груша'; // теперь ["Яблоко", "Апельсин", "Груша"]

Новый элемент можно добавить к существующему массиву:
fruits[3] = 'Лимон'; // теперь ["Яблоко", "Апельсин", "Груша", "Лимон"]

Общее число элементов массива содержится в его свойстве length:
let fruits = ["Яблоко", "Апельсин", "Слива"];
alert( fruits.length ); // 3

Вывести массив целиком можно при помощи alert:
let fruits = ["Яблоко", "Апельсин", "Слива"];
alert( fruits ); // Яблоко, Апельсин, Слива

В массиве можно хранить данные любого типа:
let arr = [ 'Яблоко', { name: 'Джон' }, true, function() { alert('привет'); } ]; // В массиве всё подряд;
alert( arr[1].name ); // Джон - получаем элемент, являющийся свойством объекта;
arr[3](); // привет - получаем элемент с индексом 3 (функция).

КСТАТИ, элементы массива перечисляются через запятую, и хорошим тоном считается ставить в конец запятую:
let fruits = [
    "Яблоко",
    "Апельсин",
    "Слива",
];

- Получение последних элементов при помощт "at".

Предположим, нам нужен последний элемент массива, длину которого мы не знаем.

Запись типа array[-1] вернёт undefined, хотя сработала бы в некоторых других ООП.

Для такой ситуации в JS существуют 2 варианта действий:

1) Можно явно вычислить индекс последнего элемента, а затем получить к нему доступ вот так: fruits[fruits.length - 1];
2) Первый вариант - громоздкий. Поэтому чаще используют синтаксис: fruits.at (-1).

Пример:
let fruits = ["Apple", "Orange", "Plum"];
alert( fruits[fruits.length-1] ); // Plum
alert( fruits.at(-1) ); // Plum

Кстати, arr.at(i) - это ровно то же самое, что и arr[i], если i >= 0.
А вот если i имеет отрицательные значения - отступ происходит от конца массива.

- Методы pop/push, shift/unshift:

"Немного предисловий"
"Очередь" - один из самых распространённых вариантов использования массивов.
Очередью принято называть упорядоченную коллекцию элементов, которая поддерживает 2 вида операций:

1) Push - добавляет элемент в конец.
2) Shift - удаляет элемент в начале, сдвигая очередь, и второй элемент становится первым.

Массивы поддерживают обе операции.

Но есть и другой вариант применения для массивов - "СТЕК" - ещё одна структура данных.
Она тоже поддерживает два варианта операций:

1) Push - добавляет элемент в конец стека;
2) Pop - удаляет последний элемент стека.

Т.О. в стеке новые элементы всегда добавляются или удаляются из "конца".

Хороший пример стека - колода карт. Новые карты кладутся наверх и снимаются сверху.

"А теперь о JS"

Массивы в JS могут работать и как очереди, и как стеки. И поддерживают добавление/ удаление элементов с начала/конца.

Кстати, техническим языком это принято называть "двусторонняя очередь".

- Методы, работающие с концом массива: POP и PUSH

"array.pop" - удяляет элемент с конца массив И ВОЗВРАЩАЕТ ЕГО:
let fruits = ["Яблоко", "Апельсин", "Груша"];
alert( fruits.pop() ); // удаляем "Груша" и выводим его алертом
alert( fruits ); // Яблоко, Апельсин

То есть можно вывести последний элемент массива 2-мя способами:
fruits.pop() и fruits.at(-1). Вот только pop после вывода элемента удалит его из массива.

"array.push" - добавляет элемент в конце массива:
let fruits = ["Яблоко", "Апельсин"];
fruits.push("Груша");
alert( fruits ); // Яблоко, Апельсин, Груша

Кстати, методом array.push() можно вернуть количество элементов массива, как и свойством fruits.length:
alert( fruits.push()); // 3
alert( fruits.length); // 3

- Методы, работающие с началом массива: SHIFT И UNSHIFT

"array.shift" - удаляет из массива первый элемент и ВОЗВРАЩАЕТ ЕГО:
let fruits = ["Яблоко", "Апельсин", "Груша"];
alert( fruits.shift() ); // удаляем Яблоко и выводим его
alert( fruits ); // Апельсин, Груша

"array.unshift" - добавляет элемент в начало массива:
let fruits = ["Апельсин", "Груша"];
fruits.unshift('Яблоко');
alert( fruits ); // Яблоко, Апельсин, Груша

Кстати, методы "push" и "unshift" могут добавлять сразу несколько элементов:
let fruits = ["Яблоко"];
fruits.push("Апельсин", "Груша");
fruits.unshift("Ананас", "Лимон"); 
alert( fruits ); // ["Ананас", "Лимон", "Яблоко", "Апельсин", "Груша"]

