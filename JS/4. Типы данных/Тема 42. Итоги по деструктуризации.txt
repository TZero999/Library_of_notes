- Деструктурирующее присваивание

В JS есть 2 чаще всего используемые структуры данных - "Object" и "Array"

Объекты позволяют создавать 1 сущность, хранящую данные по ключам.
Массивы собирают данные в упорядоченный список.

Но при передаче их в функцию ей нужен не весь массив/ объект целиком, а их элементы по отдельности.

"Деструктурирующее присваивание" - это специальный синтаксис, позволяющий "распаковать" массивы и объекты.
Распаковывает он их в несколько переменных, так как они порой более удобны.

Деструктуризация также хорошо работает со сложными функциями, имеющими много много параметров, значений по умолчанию и т.д.

- ИТОГО:

Деструктуризация позволяет разбивать объект или массив на переменные при присвоении.

"Полный синтаксис для объекта:"
    let {prop : varName = default, ...rest} = object //# Общий синтаксис.
    
    let {prop, prop: varName, prop = default} = object //# Все 3 варианта синтаксиса.

    Cвойство "prop" объекта object присваивается переменной "varName".

    Если в объекте ОТСУТСТВУЕТ такое свойство, переменной "varName" присваивается ЗНАЧЕНИЕ ПО УМОЛЧАНИЮ.
    
Свойства, которые не были упомянуты, копируются в объект "rest".

Полный синтаксис для массива:
    let [item1 = default, item2, ...rest] = array
    Первый элемент отправляется в "item1"; второй отправляется в "item2".
    
Все остальные элементы попадают в массив rest.

Можно извлекать данные из вложенных объектов и массивов.
Для этого левая сторона должна иметь ту же структуру, что и правая.