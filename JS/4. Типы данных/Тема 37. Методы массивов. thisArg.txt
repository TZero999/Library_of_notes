Большинство методов поддерживают "thisArg".

Почти все рассмотренные методы массивов (кроме arr.sort) принимают НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР thisArg.
Этот параметр используется крайне редко, но рассмотреть его не мешает.

Вот полный синтаксис этих методов вместе с НЕОБЯЗАТЕЛЬНЫМ параметром thisArg.:

arr.find(func, thisArg);
arr.filter(func, thisArg);
arr.map(func, thisArg);

Значение параметра thisArg становится this для func.

Например, вот тут мы используем метод объекта army как фильтр, и thisArg передаёт ему контекст:

let army = {
    minAge: 18,
    maxAge: 27,
    canJoin(user) {
      return user.age >= this.minAge && user.age < this.maxAge;
    }
  };
  
  let users = [
    {age: 16},
    {age: 20},
    {age: 23},
    {age: 30}
  ];
  
  // найти пользователей, для которых army.canJoin возвращает true
  let soldiers = users.filter(army.canJoin, army);
  
alert(soldiers.length); // 2
alert(soldiers[0].age); // 20
alert(soldiers[1].age); // 23


Если бы мы в примере выше использовали просто users.filter(army.canJoin), то вызов army.canJoin был бы в режиме отдельной функции.
this === undefined. Это тут же привело бы к ошибке.

А вот вызов users.filter(army.canJoin, army) можно заменить на users.filter(user => army.canJoin(user)).
Он будет делать то же самое. Последняя запись используется даже чаще, так как функция-стрелка более наглядна.