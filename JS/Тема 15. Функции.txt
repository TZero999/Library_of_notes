Зачастую нам надо повторять одно и то же действие во многих частях программы.

Например, необходимо красиво вывести сообщение при приветствии посетителя, при выходе посетителя с сайта, ещё где-нибудь.
Чтобы не повторять один и тот же код во многих местах, придуманы функции. Функции являются основными «строительными блоками» программы.
Примеры встроенных функций вы уже видели – это alert(message), prompt(message, default) и confirm(question). Но можно создавать и свои.

Объявление функции
Для создания функций мы можем использовать объявление функции.

Пример объявления функции:

function showMessage() {
  alert( 'Всем привет!' );
}
showMessage();
showMessage();

Этот пример явно демонстрирует одно из главных предназначений функций: избавление от дублирования кода.

- ЛОКАЛЬНЫЕ ПЕРЕМЕННЫЕ и ВНЕШНИЕ ПЕРЕМЕННЫЕ

Если переменные ОБЪЯВЛЕНЫ ВНУТРИ функции - они видны ТОЛЬКО этой функции.
Но при этом у самой функции есть доступ к внешним переменным и она может изменять их значения.

Причём внешняя переменная используется только если внутри функции нет локальной.

Если же ЗА пределами и ВНУТРИ функции объявляется ОДНОИМЁННАЯ переменная - локальная переменная перекрывает внешнюю.
Так, в примере ниже функция будет использовать свою переменную, а внешнюю проигнорирует:

let userName = 'Вася';
function showMessage() {
  let userName = "Петя"; // объявляем локальную переменную
  let message = 'Привет, ' + userName; // Петя
  alert(message);
}
// функция создаст и будет использовать свою собственную локальную переменную userName
showMessage();
alert( userName ); // Вася. (функция не трогала внешнюю переменную)
//На выходе получим алерты "Привет, Петя" и "Вася".

Внешняя переменная = ГЛОБАЛЬНАЯ.

Желательно сводить использование глобальных переменных к минимуму.
В современном коде обычно мало или совсем нет глобальных переменных.
Хотя они иногда полезны для хранения важнейших «общепроектовых» данных.

- ПАРАМЕТРЫ И АРГУМЕНТЫ ФУНКЦИИ

Внутрь функции мы можем передать любую информацию.

Пример:

function showMessage(from, text) { // аргументы: from, text
  alert(from + ': ' + text);
}
showMessage('Аня', 'Привет!'); // Аня: Привет! (*)
showMessage('Аня', "Как дела?"); // Аня: Как дела? (**)

Когда функция вызывается в строках (*) и (**), переданные значения копируются в локальные переменные from и text. Затем они используются в теле функции.

Параметр – это переменная, указанная в круглых скобках в объявлении функции.
Аргумент – это значение, которое передаётся функции при её вызове.

Т.О. В приведённом выше примере можно было бы сказать:
"функция showMessage объявляется с двумя параметрами, затем вызывается с двумя аргументами: from и "Привет"".

- ПАРАМЕТРЫ ПО УМОЛЧАНИЮ

Если параметр не указан, то его значением становится undefined.
Например, вышеупомянутая функция showMessage(from, text) может быть вызвана с одним аргументом:
showMessage("Аня") // Это не приведёт к ошибке. Получим "*Аня*: undefined", т.к. параметр text не указан.

Хотим задать параметр по умолчанию?
Добавляем его в параметры функции следующим образом:
function showMessage(from, text = "текст не добавлен"){
  alert( from + ": " + text );
}
showMessage("Аня"); // Получаем "Аня: текст не добавлен"

- СТАРЫЕ СКРИПТЫ
В Ранних версиях JS параметры по умолчанию не поддерживались. В них можно увидеть подобные альтернативные способы, например, проверки на undefined:

function showMessage(from, text) {
  if (text === undefined) {
    text = 'текст не добавлен';
  }
  alert( from + ": " + text );
}

- ИСПОЛЬЗОВАНИЕ ОПЕРАТОРА НУЛЕВОГО СЛИЯНИЯ ??

Современные движки JavaScript поддерживают оператор нулевого слияния ??.
Его использование будет лучшей практикой, в случае, если большинство ложных значений, таких как 0, следует расценивать как «нормальные».

Пример:
function showCount(count) {
  // если count равен undefined или null, показать "неизвестно"
  alert(count ?? "неизвестно");
}
showCount(0); // 0
showCount(null); // неизвестно
showCount(); // неизвестно

- ВОЗВРАТ ЗНАЧЕНИЙ:

Функция может вернуть результат, который будет передан в её код.
Делается это при помощи дерективы return. Она может находиться в любом месте тела функции.
Как только выполнение доходит до места тела функции, где указана директива return, функция останавливается,
а значения возвращаются в вызвавший её код.

function checkAge(age) {
  if (age > 18) 
  {
    return true;
  } else {
    return confirm('А родители разрешили?');
  }
}
let age = prompt('Сколько вам лет?', 18);
if ( checkAge(age) ) {
  alert( 'Доступ получен' );
} else {
  alert( 'Доступ закрыт' );
}

Функцию можно завершить и пустым return-ом.
Результат функции с пустым return - undefined.
Например:

function doNothing() { /* пусто */ }
alert( doNothing() === undefined ); // true

и

function doNothing() {
  return;
}
alert( doNothing() === undefined ); // true

Обе функции вернут undefined.

* ВАЖНО ИЗБЕГАТЬ РАЗРЫВОВ В КОМАНДЕ RETURN!
Для длинного выражения в return может быть заманчиво разместить его на нескольких отдельных строках, например так:
return
 (some + long + expression + or + whatever * f(a) + f(b))

Этого делать не стоит. Интерпретатор JS автоматически вставит точку с запятой и ваш return станет пустым.

- ОДНА ФУНКЦИЯ - ОДНО ДЕЙСТВИЕ

Функция должна делать только то, что явно подразумевается её названием. И это должно быть одним действием.
Два независимых действия обычно подразумевают две функции, даже если предполагается, что они будут вызываться вместе.
в этом случае мы можем создать третью функцию, которая будет их вызывать.

ИТОГО:

Объявление функции имеет вид:
function имя(параметры, через, запятую) {
  /* тело, код функции */
}

Передаваемые значения копируются в параметры функции и становятся локальными переменными.

Функции имеют доступ к внешним переменным. Но это работает только изнутри наружу. Код вне функции не имеет доступа к её локальным переменным.

Функция может возвращать значение. Если этого не происходит, тогда результат равен undefined.

Для того, чтобы сделать код более чистым и понятным.
Рекомендуется использовать локальные переменные и параметры функций, не пользоваться внешними переменными.

Функция, которая получает параметры, работает с ними и затем возвращает результат, гораздо понятнее функции, вызываемой без параметров,
но изменяющей внешние переменные, что чревато побочными эффектами.

- Именование функций:
Имя функции должно понятно и чётко отражать, что она делает. Увидев её вызов в коде, вы должны тут же понимать, что она делает, и что возвращает.
Функция – это действие, поэтому её имя обычно является глаголом.
Есть много общепринятых префиксов, таких как: create…, show…, get…, check… и т.д. 
Пользуйтесь ими как подсказками, поясняющими, что делает функция.