- Поговорим о переборе объектов

Перебор данных производится с помощью методов:
1) .keys() - возвращает МАССИВ КЛЮЧЕЙ;
2) .values() - возвращает МАССИВ ЗНАЧЕНИЙ;
3) .entries() - возвращает МАССИВ пар [КЛЮЧ, ЗНАЧЕНИЕ].

Это - универсальные методы.
Существует общее соглашение по использованию этих методов для структур данных.

Получается, что если мы создаём свою структуру данных - мы обязаны их реализовать.

Эти методы поддерживаются для следующих структур:
1) Map;
2) Set;
3) Array.

Простые объекты тоже можно перебирать похожими методами, но синтаксис будет немного отличаться.

- Object.keys, values, entries

Для простых объектов доступны следующие методы:
1) Object.keys(obj) – возвращает массив ключей.
2) Object.values(obj) – возвращает массив значений.
3) Object.entries(obj) – возвращает массив пар [ключ, значение].

- Различия с Map:
1) Синтаксис:
Map - map.keys();
Object - Object.keys(obj).

2) Возвращаемые значения:
Map - перебираемый массив;
Object - "реальный" массив.

Первое отличие в том, что мы должны вызвать Object.keys(obj), а не obj.keys().

"Почему так?"
Почему так? Основная причина – гибкость.
Объекты являются основой всех сложных структур в JavaScript.
У нас может быть объект data, который реализует свой собственный метод data.values().
И мы всё ещё можем применять к нему стандартный метод Object.values(data).

Второе отличие в том, что методы вида Object.* возвращают «реальные» массивы, а не просто итерируемые объекты.
Причина - в основном историческая.

Пример:
let user = {
    name: "John",
    age: 30
};

alert(Object.keys(user)); //# [ 'name', 'age' ]
alert(Object.values(user)); //# [ 'John', 30 ]
alert(Object.entries(user)); //# [ [ 'name', 'John' ], [ 'age', 30 ] ]

- Предупреждение о символьных ключах:
Object.keys/values/entries игнорируют символьные свойства!

Так же, как и цикл "for... in..." данные методы игнорируют свойства, использующие Symbol(...) в качестве ключей.

Обычно это не создаёт проблем и даже удобно. Но если требуется учитывать и символьные ключи - существуют отдельные методы:

1) Object.getOwnPropertySymbols - https://learn.javascript.ru/keys-values-entries#:~:text=Object.getOwnPropertySymbols
Этот метод возвращает ТОЛЬКО символьные ключи.

2)  Reflect.ownKeys(obj) - https://learn.javascript.ru/keys-values-entries#:~:text=Reflect.ownKeys(obj)
Этот метод возвращает ВСЕ ключи.

- Трансформации объекта

У объектов нет множества методов, которые есть в массивах (map, filter и т.д.)
Если мы хотели бы их применить - иожно было бы использовать Object.entries с последующим вызовом Object.fromEntries:

1) Вызываем Object.entries(obj) - получаем массив пар [ ключ, значение] для obj;
2) Вызываем нужный метод массива, например map;
3) Используем Object.fromEntries(array) на результате - получаем модифицированный объект.

Пример - у нас есть объект с товарами и ценами. Мы хотим повысить цены вдвое:

    let prices = {
    banana: 1,
    orange: 2,
    meat: 4,
  };
  
  let doublePrices = Object.fromEntries(
  Object.entries(prices).map(([key, value]) => [key, value * 2])
  );
  
alert(doublePrices.meat); // 8

Можно делать более сложные "однострочные преобразования", но стоит балансировать между компактностью и простотой понимания кода.


