Функции-callback-и:

Рассмотрим ещё примеры передачи функции в виде значения.

Создаём функцию ask с параметрами question, yes и no:
function ask(question, yes, no)

question - текст вопроса.
yes - функция, которая будет вызываться, если ответ будет ДА
no - функция, которая будет вызываться, если ответ будет НЕТ

Т.О. наша функция должна задать вопрос question и, в зависимости от того, как ответит пользователь, вызвать yes() или no():

function ask(question, yes, no){
  if (confirm(question)) yes()
  else no();
}
function showOk(){
  alert( "Вы согласны." );
}
function showCancel() {
  alert( "Вы отменили выполнение." );
}
// использование: функции showOk, showCancel передаются в качестве аргументов ask
ask("Вы согласны?", showOk, showCancel);

Аргументы "showOk" и "showCancel" функции ask называются "функциями-колбэками" или просто колбэками

Идея в том, что мы передаём функцию и ожидаем, что она вызовется обратно когда-нибудь позже.
Т.О. в нашем случае showOk становится колбэком для ответа «yes», а showCancel – для ответа «no».

Можно записать этот пример покороче, используя метод записи функции "Function Expression":

function ask(question, yes, no) {
  if (confirm(question)) yes()
  else no();
}

ask(
  "Вы согласны?",
  function() { alert("Вы согласились."); },
  function() { alert("Вы отменили выполнение."); }
);

Здесь функции, которые раньше назывались "yes" и "no" теперь не носят названия - являются анонимными. 
Они будут доступны только изнутри функции Ask.

Функция – это значение, представляющее «действие». 
Обычные значения, такие как строки или числа представляют собой данные.
Функции, с другой стороны, можно воспринимать как действия. Мы можем передавать их из переменной в переменную и запускать, когда захотим.