Date - встроенный объект. Он содержит дату и время, предоставляет методы управления ими.

- Создание объекта Date

"Синтаксис": let x = new Date().

- new Date (milliseconds)
Создаёт объект со времененм = количуству миллисекунд, прошедших с 1 января 1970 года.
Это число называют "Таймстамп"

- new Date (timestamp)
Из Таймстампа всегда можно получить новую дату с помощью new Date(timestamp) и преобразовать существующий
объект Date в таймстамп с помощью метода date.getTime().

Датам до 1 января 1970 года соответсвуют отрицательные таймстампы:
    let Dec31_1969 = new Date(-24 * 3600 * 1000);
alert( Dec31_1969 );

- new Date (datestring)
Если аргумент 1, и это строка - из неё "парсится" дата.
Алгоритм такой же, как и в Date.parse (см. ниже).

let date = new Date("2017-01-26");
alert(date); //# Thu Jan 26 2017 03:00:00 GMT+0300 (Москва, стандартное время)

- new Date (year, month, date, hours, minutes, seconds, ms)
Создаёт объект Date с заданными компонентами в местном часовом поясе.
ОБЯЗАТЕЛЬНЫМИ являются ТОЛЬКО первые 2 аргумента.

"year" - используется 4 цифры. Можно использовать и 2, вот только "22" год JS воспримет как "1922" год.
"month" - начинается с 0 (январь) и заканчивается 11 (декабрь). НЕ 1 - 12, а 0 - 11!!! 
"date" - это день месяца. значение по умолчанию - 1-ое число.
Если "hours/ minutes/ seconds/ ms" отсутствуют - значения по умолчанию 0.

Максимальная точность - 1 миллисекунда (1/1000 секунды).

- Получение отдельных компонентов даты

"getFullYear()" - Получить год (4 цифры);
"getMonth()" - Получить месяц (от 0 до 11);
"getDate()" - Получить день месяца (от 1 до 31);
"getHours() / getMinutes() / getSeconds() / genMilliseconds()" -  Получить часы, минусы, секунды и миллисекунды.

"Предупреждение!!!"
Никакого getYear(). Только getFullYear().
getYear() - устаревший метод, зачастую возвращающий год в виде двух цифр.

А вот метод "getDay()" существует, но он возвращает не номер дня, а номер ДНЯ НЕДЕЛИ.
Диапазон от 0(воскресенье) до 6 (суббота).
Да, первый день недели в JS - воскресенье.

"UTC"
Данные варианты возвращают значения в соответствии с МЕСТНЫМ частовым поясом.
Если надо время в формате UTC - используют доп. методы:
"getUTCFullYear()", "getUTCMonth()", "getUTCDay()".
UTC ставится ВСЕГДА ПОСЛЕ get.

- Установка компонентов даты

Следующие методы позволяют установить компоненты даты и времени:
1) setFullYear(year, [month], [date]);
2) setMonth(month, [date]);
3) setDate(date);
4) setHours(hour, [min], [sec], [ms]);
5) setMinutes(min, [sec], [ms]);
6) setSeconds(sec, [ms]);
7) setMilliseconds(ms);
8) setTime(milliseconds) (устанавливает дату в виде целого количества миллисекунд, прошедших с 01.01.1970 UTC).

У всех этих методов (кроме setTime()) есть свои UTC-вариации.

- Автоисправление даты

"Автоисправление" - полезная особенность объектов Date.
Так, можно устанавливать компоненты даты вне обычных диапазонов, а объект сам всё исправит.

Пример:
    let date = new Date(2013, 0, 32); //# 32 Jan 2013 ?!?
alert(date); //# ...1st Feb 2013!

"28 февраля..."
У нас есть дата - 28 февраля. Надо добавить к ней 2 дня.
Нам не придётся смотреть в календарь, чтобы убедиться високосный или нет был год.
Просто прибавляем 2 дня и получаем результат:
    let date = new Date(2016, 1, 28);
    date.setDate(date.getDate() + 2);
alert( date ); //# 1 Mar 2016

"Дата по прошествию времени"
Попробуем получить дату спустя 70 секунд с текущего момента:
    let date = new Date();
    date.setSeconds(date.getSeconds() + 70);
alert( date ); //# Выводит дату, на 70 секунд превышающую текущую.

"Исправление с отрицательными значениями"
    let date = new Date(2016, 0, 2); // 2 Jan 2016
    date.setDate(1);    //# Задаём первое число месяца
    alert( date );      //# Получаем Fri Jan 01 2016 00:00:00 GMT+0300 (Москва, стандартное время)
    date.setDate(0);    //# Первый день месяца - это 1. Потому получим последнее число предыдущего месяца
alert( date );          //# Получаем 31 Dec 2015

