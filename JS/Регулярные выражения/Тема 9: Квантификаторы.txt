* КВАНТИФИКАТОРЫ +, *, ? и {n}:
Возьмём строку вида +7(903)-123-45-67 и найдём в ней все числа.

И именно числа, в формате: [7, 903, 123, 45, 67].
Число — это последовательность из 1 или более цифр \d.
Поэтому чтобы указать количество повторений, нам нужно добавить квантификатор.

* КОЛИЧЕСТВО {n}:
Простейший квантификатор - число в фигурных скобках {n}

Он добавляется к символу или символьному классу, или к набору и указывает, сколько их нам нужно.
Количество, можно указать по разному:

1. {2}
Этот шаблон означает, что мы ищем 5 символов.

# Например, найдём 5 цифр:
alert( "Мне 12345 лет".match(/\d{2}/) );     //#  [12]
alert( "Мне 12345 лет".match(/\b\d{2}\b/) ); //#  null 
Мы добавили \b, чтобы исключить числа длиннее, чем 2 символа: /\b\d{2}\b/

2. {1,2}
Шаблон обозначает, что мы ищем от 1 до 2 символов.
alert( "Мне не 12, а 1234 года".match(/\d{3,5}/) ); //# [12]

Верхнюю границу можно не указывать:
шаблон /\d{3,}/ найдёт последовательность чисел длиной 3 и более цифр.

С помощью данного квантификатора можем найти последовательность цифр из номера телефона:
{
    let str = "+7(903)-123-45-67";
    let numbers = str.match(/\d{1,}/g);
    alert(numbers); // [7,903,123,45,67]
}

* КОРОТКИЕ ОБОЗНАЧЕНИЯ:
1. +
Для наиболее востребованных квантификаторов есть сокращённые формы записи.

Квантификатор "+" == {1,}. То бишь "Больше одного".
{
    let str = "+7(903)-123-45-67";
    alert( str.match(/\d+/g) ); //# [7,903,123,45,67]
}

2. ?
Квантификатор "?" == {0,1}. То бишь "Ноль или один".

Таким образом шаблон colou?r найдёт два варианта: color и colour.

Вспомним пример из предыдущей темы: "Топ, хоп, хлоп" и применим к нему квантификатор "?":
{
    alert( "Топ, хоп, хлоп!".match(/[тх].?оп/gis) ); //# ["Топ","хоп","хлоп"]
    //# ну или так:
    alert( "Топ, хоп, хлоп!".match(/.?[тхл]оп/gis) ); //# ["Топ","хоп","хлоп"] 
}

3. *
Квантификатор "*" == {0,}. То бишь "Ноль и больше".

# Пример шаблона /\d0*/ находит цифру и все нули за ней. Но их может и не быть:
{
    alert( "1000 100 10 1".match(/\d0*/g) ); //# [1000, 100, 10, 1]
}

Кстати, если используем квантификатор "+" в этой же ситуации получим:
{
    alert( "1000 100 10 1".match(/\d0+/g) ); //# [1000, 100, 10]
    //# 1 не подходит, т.к шаблон 0+ требует минимум один ноль.
}

* ЕЩЁ ПРИМЕРЫ:
Квантификаторы используются очень часто.
Они - основные строительные блоки сложных регулярных выражений.

# Регулярное выражение для десятичных дробей - цифра(-ы) + экранировання точка + цифра(-ы):
{
    alert( "0 1 12.345 7890".match(/\d+\.\d+/g) ); //# 12.345
}

# Регулярное выражение для "открывающего HTML-тега без атрибутов":
{
    alert( "<body> ... </body>".match(/<[a-z]+>/gi) ); //# <body>
}

Но есть теги <h1> и т.п. Цифра может быть на любом месте, кроме первого. Улучшим наш шаблон:
{
    alert( "<h1>Привет!</h1>".match(/<[a-z][a-z0-9]*>/gi) ); //# <h1>
}

# Регулярное выражение для "открывающего или закрывающего HTML-тега без атрибутов":
В начало предыдущего шаблона мы просто добавляем необязательный слэш с квантификатором "?":
Не забываем заэкранировать слэш, чтобы JavaScript не принял его за конец шаблона:
{
    alert( "<h1>Привет!</h1>".match(/<\/?[a-z][a-z0-9]*>/gi) ); // <h1>, </h1>
}

* ТОЧНОСТЬ РЕГУЛЯРНОГО ВЫРАЖЕНИЯ ЗАВИСИТ ОТ ЕГО СЛОЖНОСТИ
Как правило, если мы хотим, чтобы регулярка была точнее - её приходится усложнять.

