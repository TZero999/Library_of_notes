* МНОГОСТРОЧНЫЙ РЕЖИМ ЯКОРЕЙ ^ $, ФЛАГ "m":
Многострочный режим включается флагом \m.

Он влияет на поведение символов начала и конца строки: ^ и $.

В многострочном режиме они будут обозначать не только начало и конец строки, 
но и начало/конец каждой строки в многострочном тексте.

* ПОИСК В НАЧАЛЕ СТРОК ^:
# Сразу рассмотрим пример:
{
    let str = 
    `1е место: Винни
    2е место: Пятачок
    3е место: Слонопотам`;
    console.log( str.match(/^\d/gm) ); //# [1, 2, 3]
    console.log( str.match(/^\d/g) );  //# [1]
}

Как мы видим из примера, без флага \m мы бы нашли только первое число.

* ПОИСК В КОНЦЕ СТРОК $:
# И вновь пример:
{
    let str = `Винни: 1
    Пятачок: 2
    Слонопотам: 3`;
    console.log( str.match(/\d$/gm) ); //# [1, 2, 3]
    console.log( str.match(/\d$/g) );  //# [3]
}

Стоит обратить внимание, что без флага \m мы бы нашли именно последний символ ПОСЛЕДНЕЙ строки.

* ИЩЕМ \n вместо ^ и $:
Для поиска конца строки можно использовать символ переноса строки \n, вместо $.

Разницу рассмотрим на примере:

# Поищем /\d\n/ вместо /\d$/:
{
    let str = `Винни: 1
    Пятачок: 2
    Слонопотам: 3`;
    console.log( str.match(/\d\n/g) ); //# [1\n, 2\n]
}

По итогу мы получили 2 совпадения, вместо 3.
После 3-ки нет перевода строки, но есть конец строки и самого текста.

К тому же теперь к каждому найденному совпадению добавляются ещё и символы перевода строки.
В отличие от якорей, которые не входят в результат и имеют нулевую ширину, символ перевода
строки входит в результат.

Поэтому в регулярках поиск по \n используется тогда, когда в результате мы хотим получить
этот символ перевода строки.

