Как мы помним, в JS 8 типов данных.
"7 примитивных" и 1, именуемый объектами.

Объекты позволяют хранить коллекцию значений и более сложных сущностей.

Объект создаётся с помощью фигурных скобок {...} с необязательным списком свойств.

СВОЙСТВА объекта -  это пары "ключ : значение", где ключ - строка, имя свойства. 
Значение - может быть абсолютно чем угодно.

Объект можно создать двумя способами:

let user = new Object(); // синтаксис "конструктор объекта"
let user = {};  // синтаксис "литерал объекта"

Обычно используют второй вариант - литерал объекта.

При использовании литерального синтаксиса {...} мы сразу можем поместить в объект несколько свойств в виде пар «ключ: значение»:
Пример:

let user = {     // объект
    name: "John",  // под ключом "name" хранится значение "John"
    age: 30        // под ключом "age" хранится значение 30
  };

У каждого свойства есть ключ (имя, идентификатор), затем следует двоеточие ":" и указывается значение свойства.
Несколько свойств объекта перечисляются через запятую.

На примере видно, что в объекте "user" сейчас 2 свойства: "name" и "age".

К отдельным свойствам объекта обращаются следующим образом:

alert( user.name ); // John
alert( user.age ); // 30

Добавление свойства с логическим значением:
user.isAdmin = true;

Удаления свойства оператором delete:
delete user.age;

Имя свойства может состоять из нескольких слов, но надо будет использовать кавычки:
let user = {
    name: "John",
    age: 30,
    "likes birds": true  // имя свойства из нескольких слов должно быть в кавычках
  };

Последнее свойство желателньо заканчивать запятой, хоть оно и последнее на текеущий момент.
Это "висячая запятая", которая упрощает добавление, удаление и перемещение свойств.

ЕСЛИ объект объявлен как КОНСТАНТА, его свойства ВСЁ РАВНО МОГУТ БЫТЬ ИЗМЕНЕНЫ:
const user = {
    name: "John"
  };
    user.name = "Pete"; // (*)
    alert(user.name); // Pete
// Ошибку здесь мы получим, только если будем пытаться поменять имя самой переменной user.

Если имя свойства состоит из нескольких слов мы не сможем обратитьься к нему через точку:
user.likes birds = true // Выдаст ошибку, так как JS не увидит то, что идёт после likes.

В таких случаях используем квадратные скобки [].
let user = {};
user["likes birds"] = true; // Присваивание значения свойству
alert(user["likes birds"]); // true. Получение значения свойства
delete user["likes birds"]; // Удаление свойства

Квадратные кавычки позволяют обратиться к свойству через его имя, если оно является результатом выражения.
Так, если имя свойства хранится в переменной, то:
let key = "likes birds"; 
user[key] = true; // то же самое, что и user["likes birds"] = true;

Пример:
let user = {
    name: "John",
    age: 30
  };
  
  let key = prompt("Что вы хотите узнать о пользователе?", "name");
  // доступ к свойству через переменную
  alert( user[key] ); // John (если ввели "name")

Запись через точку такого не позволит:
let user = {
    name: "John",
    age: 30
  };
    let key = "name";
  alert( user.key ); // undefined

Можно использовать квадратные скобки для создания вычисляемого свойства:
let fruit = prompt("Какой фрукт купить?", "apple");
let bag = {
  [fruit]: 5, // имя свойства будет взято из переменной fruit
};
alert( bag.apple ); // 5, если fruit="apple"

Квадратные скобки дают намного больше возможностей, чем запись через точку.
Они позволяют использовать любые имена свойств и переменные, хотя и требуют более громоздких конструкций кода.

Подведём итог: в большинстве случаев, когда имена свойств известны и просты, используется запись через точку.
Если же нам нужно что-то более сложное, то мы используем квадратные скобки.