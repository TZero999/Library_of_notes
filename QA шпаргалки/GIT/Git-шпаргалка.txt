В чем состоит отличие Git от Subversion?
Главное отличие Git от Subversion заключается в том, что Git — распределенная система контроля версий.
Звучит ужасающе, но на практике это означает очень простую вещь. Каждый разработчик держит у себя на диске
отдельный репозиторий. 
НЕ КОПИЮ репозитория, не некоторые бранчи, а тупо отдельный и при этом абсолютно полноценный репозиторий.

Пока мы работаем в рамках своего репозитория, все происходит в точности, как в Subversion.
Мы коммитим и откатываем изменения, создаем, мержим и удаляем бранчи, разрешаем конфликты и т.д. 
Помимо этого, предусмотрены команды для работы с репозиториями на удаленных машинах. 
Например, "git push" означает мерж локальных изменений в удаленный репозиторий,
а "git pull" — наоборот, мерж изменений из удаленного репозитория в локальный.
Обмен данными по сети обычно происходит с использованием протокола SSH.


* Работа в Git с нуля:
В первую очередь необходимо поставить Git:
- pkg_add -r git

Затем создаем пару ssh ключей, если не создавали ее ранее:
- ssh-keygen
- cat ~/.ssh/id_rsa.pub

Заходим на БитБакет, создаем git-репозиторий под новый проект, а в свойствах аккаунта прописываем свой открытый ssh-ключ. Затем клонируем репозиторий:
- cd ~/projects/haskell
- git clone git@bitbucket.org:afiskon/hs-textgen.git
- cd hs-textgen

Делаем какие-то изменения:
- echo test > TODO.TXT

Добавляем новый файл в репозиторий и делаем коммит:
- git add TODO.TXT
- git commit -a

Поскольку я не указал описание коммита, запускается редактор VIM, с помощью которого я и ввожу описание.
Затем я отправляю все сделанные мною изменения на БитБакет:
- git push origin

Допустим, теперь я хочу сделать некоторые изменения в проекте, но не уверен, выйдет ли из этого что-то хорошее. В таких случаях создается новая ветка:
- git branch new_feature
- git checkout new_feature

Работаем с этой веткой. Если ничего хорошего не вышло, возвращаемся к основной ветке (она же «trunk» или «ствол»):
- git checkout master

Если вышло что-то хорошее, мержим ветку в master (о разрешении конфликтов рассказано в следующем параграфе):
- git commit -a 
- git checkout master 
- git merge new_feature 

Не забываем время от времени отправлять наш код на BitBucket:
- git push origin

Если мы правим код с нескольких компьютеров, то перед началом работы не забываем «накатить» в локальный репозиторий последнюю версию кода:
- git pull origin

Работа в команде мало чем отличается от описанного выше. Только каждый программист должен работать со своей веткой,
чтобы не мешать другим программистам. Одна из классических ошибок при начале работы с Git заключается в push’е всех веток,
а не только той, с которой вы работали. Вообще я бы советовал первое время перед выполнением каждого push делать паузу с тем,
чтобы подумать, что и куда сейчас уйдет. Для большей безопасности советую при генерации ssh-ключей указать пароль.
Тогда каждый запрос пароля со стороны Git будет для вас сигналом «Эй, ты делаешь что-то, что затронет других».

Для работы с Git под Windows можно воспользоваться клиентом "TortoiseGit".
Если память не подводит, для работы ему нужен "Git for Windows". Для генерации ключей можно воспользоваться утилитой "PuTTyGen".
Только не забудьте экспортировать открытый ключ в правильном формате, «Conversions → Export OpenSSH key».

Следует отметить, что мне лично TortoiseGit показался не слишком удобным. Возможно, это всего лишь дело привычки,
но мне кажется намного удобнее работать с Git из консоли, чем с помощью контекстного меню в Проводнике.

Шпаргалка по командам: 

Создать новый репозиторий:
- git init project-name

Если вы планируете клонировать его по ssh с удаленной машины, также скажите:
- git config --bool core.bare true
… иначе при git push вы будете получать странные ошибки вроде:

Refusing to update checked out branch: refs/heads/master
By default, updating the current branch in a non-bare repository
is denied, because it will make the index and work tree inconsistent
with what you pushed, and will require 'git reset --hard' to match
the work tree to HEAD.



Иногда требуется создать копию репозитория или перенести его с одной машины на другую. Это делается примерно так:
- mkdir -p /tmp/git-copy
- cd /tmp/git-copy
- git clone --bare git@example.com:afiskon/cpp-opengl-tutorial1.git
- cd cpp-opengl-tutorial1.git
- git push --mirror git@example.com:afiskon/cpp-opengl-tutorial2.git

Следует отметить, что Git позволяет использовать короткую запись хэшей.
Вместо «d8578edf8458ce06fbc5bb76a58c5ca4a58c5ca4» можно писать «d8578edf» или даже «d857».

Удаление сабмодуля производится так:
1) Скажите git rm --cached имя_сабмодуля;
2) Удалите соответствующие строчки из файла .gitmodules;
3) Также грохните соответствующую секцию в .git/config;
4) Сделайте коммит;
4) Удалите файлы сабмодуля;
5) Удалите каталог .git/modules/имя_сабмодуля;