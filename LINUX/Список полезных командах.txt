1. [ SSH команды: ]

1. ls - показывает содержимое каталога. С флагами позволяет отображать ещё и права доступа и т.д.
ls - Простая и удобная команда. Без дополнительных флагов просто отображает все ВИДИМЫЕ файлы
и каталоги в выбранной директории.

Флаги для команды ls:
{
- a
Отображает ВСЕ (включая скрытые) файлы и директории.

- l
Отображает все ВИДИМЫЕ файлы и выводит дополнительную ифнормацию о них:
владелец, размер, права доступа последнее время имзенения и т.д.
}

Вывод, к примеру, "ls -l 'JavaScript с нуля.pdf'" выглядит приблизительно следующим образом:
{
    -rw-rw-r-- 1 tzero tzero 14808635 апр  5 15:33 'JavaScript с нуля.pdf'

Здесь: 
- “-rw-rw-r--“
Показывает текущие права доступа.

Здесь могут быть 4 главные буквы на которые надо обратить внимание: r,w,x,d.
- d
Означает, что тип файла — это каталог. Стоит на первом месте или отсутствует. 
- x
Разрешение на выполнение файла или папки (это разрешение необходимо для входа в папку).
- w
Разрешение на запись файла или папки (редактирование, удаление и т.д.)
- r
Права на чтение. Вы можете читать файл, но не можете выполнять иные действия.

- 1
Число хард связи.
Хард связь - это дополнительное имя для существующего файла.

- tzero tzero
Показывает владельца файла и его группу.

- 14808635
Показывает размер файла в байтах.

- апр  5 15:33
Дата последнего изменения

- 'JavaScript с нуля.pdf'
Имя файла или папки
}

* cat - отобразить содержимое файла
Синтаксис:
cat [опции] [имя_файла_1 имя_файла_2 имя_файла_3]

Команда "cat" чаще всего используется для:
1) Отображения содержимого одного или нескольких текстовых файлов;
2) Объединения файлов путем добавления содержимого одного файла в конец другого файла;
3) Создания новых файлов.

- cat file1.txt
Отобразить содержимое файла "file1"

- cat file1.txt file2.txt file3.txt
Отобразить содержимое сразу 3 файлов

- cat file1.txt - file2.txt
Комбинирование вывода текста из файла и стандартного ввода

-  cat file1 file2 > file3
Запись содержимого файлов 1 и 2 в файл 3

Флаги для команды cat:
{
- cat -b
Нумеровать только непустые строки
- cat -E
Показывать символ $ в конце каждой строки
- cat -n
Нумеровать все строки
- cat -s 
Удалять пустые повторяющиеся строки
- cat -T 
Отображать табуляции в виде ^I
- cat -h 
Отобразить справку
- cat -v
Версия утилиты
}

* cp - копирование файлов и папок
2 варианта синтаксиса:
$ cp опции путь_к_файлу_источнику путь_к_файлу_назначения
Копирование файла в ту же директорию под другим именем

$ cp опции путь_к_файлу_источнику путь_к_директории_назначения
Копирование файла в другую директорию с сохранением имени

Параметры команды cp:
{
--attributes-only
Не копировать содержимое файла, а только флаги доступа и владельца;
- b, --backup
Создать резервную копию файла назначения если он существует;
--copy-contents
Копировать содержимое для специальных файлов (сокеты, файлы устройств);
- f, --force
Удалить файл назначения перед попыткой записи в него если он существует;
- i, --interactive 
Спрашивать, нужно ли перезаписывать существующие файлы;
- n, --no-clobber
Не перезаписывать существующие файлы;
- P, --no-dereference
Копировать сами символические ссылки, а не то на что они указывают;
- L, --dereference
Копировать не символические ссылки, а то, на что они указывают;
- l, --link
Создавать жесткие ссылки вместо копирования;
--preserve
Переносить указанные атрибуты с файла источника в файл назначения, возможные значения: mode, ownership, time‐stamps, context, links, xattr, all;
--no-preserve 
Не переносить указанные атрибуты;
--parents
Сохранять путь, указанный в файле источнике, в папке назначения;
- r, --recursive
Копировать папку Linux рекурсивно;
--reflink
Использовать Copy on Write если это поддерживается файловой системой;
- s, --symbolic-link
Не выполнять копирование файлов в Linux, а создавать символические ссылки;
- S, --suffix
Указать суффикс для резервных копий файлов;
--sparse 
Настройка работы с разреженными файлами;
- t, --target-directory
Считать файл-назначения директорией и копировать файл-источник или директорию-источник в эту директорию с оригинальным именем;
- T, --no-target-directory
Считать директорию назначения файлом или директорией для записи данных. Если в качестве источника выбран файл, то он будет скопирован с новым именем. Если директория, то её содержимое будет скопировано в директорию назначения;
- u, --upgrade
Скопировать файл, только если он был изменён;
- x, --one-file-system
Рекурсивное копирование не должно выходить за пределы этой файловой системы;
- v, --verbose
Максимально подробный вывод.
- p
Сохранять владельца, временные метки и флаги доступа при копировании,
аналогично --preserve=mode,ownership,timestamps;
- d
Копировать символические и жесткие ссылки именно как ссылки,
аналогично --no-dereference --preserve=links;
- a
Режим резервного копирования, при котором сохраняются все атрибуты, ссылки,
и выполняется резервное копирование папок.
Аналогично --recursive --preserve=all, --no-dereference;
}

* find - поиск файлов и папок
Синтаксис: 
find [папка] [параметры] критерий шаблон [действие]
"Папка" - каталог в котором будем искать
"Параметры" - дополнительные параметры, например, глубина поиска, и т д
"Критерий" - по какому критерию будем искать: имя, дата создания, права, владелец и т д.
"Шаблон" - непосредственно значение по которому будем отбирать файлы.

Пример:
$ find . -name "testfile*"
Ищем в текущей папке файл с именем "testfile".

$ find . -name "test" -not -name "*.php"
Ищем в текущей папке файл с именем "test", но не с расширением "php".

* cd - сменить текущий каталог
Синтаксис:
cd [OPTIONS] [Path/to/Directory]

Пример:
cd /home/tzero/CodeceptJS

* pwd - отобразить текущую директорию
Синтаксис:
pwd [опции]

Простейшая команда, позволяющая вывести в терминал путь к директории, в которой вы сейчас
находитесь. Для терминала Linux стандартная директория - это домашний каталог пользователя.

При этом каждая запущенная программа считает текущей папкой именно ту папку, из которой
эта программа была запущена.

* mkdir - создать новую папку
Синтаксис:
$ mkdir [опции] [Директория_1 Директория_2 Директория_3]

Команда используется для создания новых каталогов. Расшифровывается как 
"MaKe DIRectory". Позволяет с помощью терминала создать папку с определённым именем внутри
текущего каталога.

Можно создать сразу несколько директорий, указав их имена через пробел.
Можно создать ЦЕПОЧКУ ДИРЕКТОРИЙ, но для этого необходимо УКАЗАТЬ ФЛАГ "-p".

* touch - создание файла с указанным расширением
Синтаксис:
$ touch [опции] [файл1.расширение файл2.расширение файл3.расширение]

Причём расширение можно указать совершенно любым или не указывать его вовсе.
Создать можно несколько файлов за раз, указывая их имена и расширения через пробел.

* rm - удаление указанного файла или каталога
Синтаксис:
$ rm [опции] [файл1 файл2 файл3]

Позволяет удалить указанные файлы или каталог. Для удаления каталога необходимо 
использовать флаг "-r". Для удаления нескольких файлов их названия надо записать
через пробел.

Пример:
$ rm NewFile
Удалит файл NewFile в текущем каталоге.

$ rm -r NewDirectory
Удалит каталог NewDirectory, располагающийся в текущем каталоге.

Примечание: удаляем файл с названием, начинающимся с "-":
$ rm -- -myfile или $ rm ./-myfile

* mv - перемещение/переименование файлов и папок
Синтаксис:
$ mv [опции] [исходные_файлы] [место_назначения]

"Исходным файлом" могут быть один файл, несколько файлов, один каталог или сразу несколько каталогов.

"Место назначения" -  это название директории, в которую мы перемещаем исходные файлы или директории.
Или же это новое название файла или директории, если выполняется переименование. 
То есть это либо директория, либо новое название файла или директории.

Примеры использования:

$ mv File_1 File_2 Folder/ 
Переместить файлы "File_1" и "File_2" в папку "Folder" (При условии, что папка "Folder" существует).

$ mv File_1.txt File_2.txt
Переименовать файл "File_1.txt" в "File_2.txt"

* grep - поиск конкретного слова/фразы в файле
Синтаксис:
$ grep [опции] шаблон [/путь/к/файлАМ/папкАМ...]
Шаблон - любая строка или регулярное выражение, по которому выполняем поиск
grep позволяет искать сразу в нескольких папках или файлах. Как - рассмотрим ниже.

Её можно комбинировать с другими командами. Например, можем передать вывод команды "ls" в "grep" для
поиска конкретной папки или файла:
$ ls | grep My_Documents

Использование флага "-е" позволяет осуществить поиск нескольких шаблонов в нескольких папках:
$ grep -e 'Class 1' -e Todd Students.txt - ищет "Class 1" или "Todd" в файле Students.txt




* man - вывод "гайда" по указанной команде
Команда man схожа с командой --help, хотя имеет ряд отличий.
Команда "man" куда более "масштабна", в ней содержится даже информация об авторе указанной
после неё команды. Также она не оставляет вывода в терминале и при выходе из неё нажатием
"q" терминал остаётся пустым.

* vi или nano - терминальные текстовые редакторы
Данные команды используются для входа в текстовый редактор. К примеру:
$ nano newfile
Либо создаём новый файл с именем “newfile” и начинаем его редактирование в редакторе nano,
либо начнём редактирование существующего файла “newfile” (если он имеется) с помощью того же редактора.

* cd - смена текущего каталога

* [ Другие полезные команды Linux: ]

1. echo - добавление в файл - доработать
2. chown - изменить владельца файла или папки
Синтаксис: chown [владелец/группа владельца] [имя файла/каталога]

К примеру, если у нас есть файл “demo.txt” и мы хотим изменить владельца
на “jerry” и группу владельца на “clients”, нам необходима эта команда:
$ chown jerry:clients demo.txt

3. chmod - изменить права доступа к файлу или папке
Перед использованием данной команды первым делом стоит проверить права доступа
к интересующим файлам командой "ls -l".
Эта команда позволяет изменить права доступа к файлу или папке.

Делается это путём складывания цифр, представляющих собой каждое из "прав":
r (чтение) – 4
w (запись) – 2
x (выполнение) – 1

4. ping - проверить доступность удалённого хоста