Повторим и закрепим информацию из предыдущих тем.

Критические этапы рендеринга - последовательность шагов, кторые выполняет браузер, преобразуя 
HTML, CSS и JS в пиксели.

Существует 5 критических этапов рендеринга, которые включают в себя работу с:
DOM - Document Object Model;
CSS - Cascading Style Sheets Object Model;
Render Tree - дерево рендеринга;
Layout - Компоновкой объектов.

DOM создаётся в момент парсинга HTML-файла.
HTML может запрашивать стили и скрипты, модифицирующие DOM.
Затем создаётся CSSOM.

Движок браузера комбинирует две объектные модели DOM и CSSOM в Render Tree.

Компоновка определяет размеры и позицию каждого элемента на странице.

Как только компоновка отработала - пиксели отрисовываются на экране.

# Понимание CRP
{
    Производительность Web-приложений включает в себя:
    1) Запросы к серверу
    2) Получение ответов
    3) Загрузку файлов
    4) Парсинг
    5) Выполнение скриптов
    6) Рендеринг
    7) Компоновку
    8) Отрисовку пикселей.

    Хронология:
    1) Происходит запрос HTML-документа от машины клиента к серверу.
    2) Сервер возвращает HTTP ответ, состоящий из заголовка и тела (header и body).
    Именно в теле запроса содержится запрашиваемый HTML-документ.
    3) Браузер начинает парсить полученный HTML и преобразует полученные байты в DOM.
    4) Когда в HTML-документе встречается ссылка на сторонние файлы - браузер делает новый запрос
    Некоторые из этих запросов могут быть блокирующими. 
    5) Браузер парсит HTML и создаёт DOM пока не запрос на получение HTML не подходит к концу.
    6) После завершения парсинга DOM браузер конструирует CSS модель CSSOM.
    7) Как только сформированы обе модели - браузер комбинирует их и создаёт Render Tree.
    В нём он вычисляет стили для каждого видимого элемента страницы.
    8) После формирования Render Tree происходит компановка Layout.
    Определяются положения и размеры элементов дерева рендера.
    9) Как только компановка завершена - страница рендеринтся - отрисовывается.
}

# Отличия формирования DOM и CSSOM.
{
    Создание DOM инкрементально и происходит "по узлам". DOM несёт в себе содержимое страницы.
    
    Формирование CSSOM не последовательное. CSSOM несёт в себе информацию о всех стилях страницы
    и узлов - данные о том, как стилизовать DOM.

    Формирование CSSOM блокирует рендеринг, пока не будут получены и обработаны все CSS-правила.
    Блокировка происходит из-за того, что правила могут быть перезаписаны. Следовательно стоит 
    дождаться построения CSSOM, чтобы избежать дополнительных переопределений и перерисовок.

    CSSOM не может быть использован для моментального построения Render Tree без DOM, т.к. может 
    оказаться так, что следующйи набор правил сделает какой-либо из узлов дерева невидимым и 
    браузер будет вынужден лишний раз вызывать перекомпоновку и перерасчёт стилей.
}

# Оптимизация CSS
{
    Сначала измеряйте - затем оптимизируйте. Парсинг CSS происходит крайне быстро и очень часто
    его оптимизация не стоит затраченного времени.
    Более специфичные селекторы требуют от браузера бОльших объёмов работы: ".foo {}" сработает
    быстрее, чем ".foo .bar {}".

    Куда лучше для оптимизации CSS работает унификация и разделение CSS-файлов, чем 
    перепись селекторов.
}

# Формирование Render Tree
{
    При формировании дерева рендера браузер обходит все узлы DOM (начиная от корневого) и определяет,
    какие CSS-правила нужно приписать данному узлу.

    Опять же, Render Tree включает только видимые узлы, а следовательно <head> и узлы с "display:none"
    (и их потомки) не включаются в Render Tree.
}

# Компоновка
{
    Render Tree готово? За дело берётся компоновка.
    Компоновка зависит от размеров экрана. Этот этап определяет, где и как будут расположены элементы.

    Если не указано иного, элемент body имеет ширину 100%, то есть 100% ширины родителя -
    видимой области viewport (окна документа).

    Мета-тег viewport (указывается в тэге <head>) определяет ширину видимой области и влияет на 
    компановку. Если этого тэга нет - браузер использует ширину "по умолчанию" - 960 px.

    В браузерах, открывающихся по умолчанию в полноэкранном режиме, например, в браузере телефона,
    установка тега <meta name="viewport" content="width=device-width"> установит ширину видимой 
    области в 100% от ширины экрана устройства, вместо того, чтобы использовать ширину по умолчанию.
    
    Эта ширина (device-width) изменяется каждый раз, когда пользователь поворачивает телефон. 
    Это приводит к запуску этапа компоновки. Равно как и при изменении размеров окна в обычном
    браузере.

    Производительность компоновки НАПРЯМУЮ зависит от DOM: чем больше узлов - тем хуже скорость
    компоновки. Компоновка может являться узким местом производительности, особенно если вместе с ней
    выполняется скроллинг или другие анимации. 

    Для уменьшения частоту перекомпоновки стоит избегать анимаций свойств, связанных с box-моделью и 
    группируйте обновления экрана.
}

# Отрисовка
{
    Последний этап критического пути. Наступает, когда дерево рендера создано и компоновка выполнена.
    
    При первичной загрузке документа (onload) будет отрисован весь экран. После этого перерисовываться
    будут только необходимые к обновлению элементы для оптимизации процесса отрисовки.

    Отрисовка - быстрый процесс. Но стоит помнить, что компоновка и отрисовка прочно связаны.
    Каждое CSS-свойство узла увеличивает время отрисовки. Но и удаление стилей даст мизерный
    прирост производительности. Здесь, всё как и прежде - сначала ИЗМЕРЯЕМ, затем ОПТИМИЗИРУЕМ.
}

