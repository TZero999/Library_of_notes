Браузер получил первый ответ сервера размером 14 Кб.

Как только первый фрагмент данных получен - браузер сразу начинает обрабатывать информацию.
Чтение полученных браузером данных называют "Парсингом".

Во время парсинга полученные преобразуются в DOM (Document Object Model) и CSSOM (CSS Object Model).
В свою очередь данные объекты участвуют в отрисовке контента.

DOM - внутреннее представление разметки HTML.
Браузер предоставляет возможности манипуляции объектами этой модели через разные JS API.

Даже если ответ на запрос больше 14 Кб браузер пытается отрисовать страницу с теми первыми данными,
что уже имеются у него. Поэтому для оптимизации рекомендуется включать в инициирующие 14 Кб
все необходимые для рендера данные.

# Построение DOM
{
    Первым делом обрабатывается разметка HTML и строится дерево DOM.
    Обработка HTML состоит из токенизации и построения дерева.

    HTML-токены состоят из тегов старта, атрибутов и тегов финиша.

    DOM описывает содержимое документа.
    Элемент <html> - первый и корневой элемент дерева документа.
    Дерево отражает связи и иерархию тегов. Теги, вложенные в другие теги - "дети".

    Чем больше узлов в древе - тем сложнее построить DOM.

    Когда парсер находит неблокирующие элементы (например, изображения), браузер отправляет 
    запрос на загрузку ресурсов, а сам продолжает обработку.

    Обработка продолжается когда найдена ссылка на CSS-файл.
    Если обнаружен тег <script> без параметров "async" или "defer" - он блокирует 
    и приостанавливает обработку HTML до завершения загрузки скрипта.

    Инструмент, зовущийся "Сканер Предзагрузки" отыскивает такие скрипты заранее, однако
    сложные и объёмные скрипты крайне не желательно делать блокирующими.
}

# + Сканер предзагрузки
{
    Построение дерева занимает весь поток процесса. Это - узкое место в производительности.
    Для оптимизации процесса был создан "Сканер предзагрузки". 

    Он обрабатывает содержимое документа и запрашивает высокоприоритетные ресурсы:
    CSS-стили, JS-скрипты и шрифты.

    Сканер позволяет заранее загружать данные ресурсы, не дожидаясь пока парсер доберётся до
    них и заблокирует дальнейшую отрисовку контента.

    Чтобы сделать скрипт неблокирующим, следует добавить атрибут async
    или (в случае, если порядок загрузки скриптов важен) атрибут defer.
}

# Блокирующие CSS
{
Ожидание получения CSS не блокирует парсинг, но блокирует загрузку JS-скриптов.
Это предусловлено тем, что скрипты часто используются для выборки узлов документа по CSS-селекторам.
}

# Построение модели стилей CSSOM
{
    Второй шаг критического пути рендеринга - обработка CSS и построение дерева объектов CSS.

    CSSOM похожа на DOM. Обе эти модели имеют древовидную структуру.
    При этом они являются независимыми друг от друга структурами данных.
    Сам принцип формирования древа CSS такой же, как с DOM.

    CSS - Cascading Style Sheets. Почему такое название? Всё просто - браузер применяется
    правила отображения одно за другим, от более общих, двигаясь ко всё более специфичным.
    Остюда и "каскадность".

    Построение CSSOM происходит очень быстро и не отображается в инструментах разработчика 
    отдельным цветом. Обычно оно вообще отображается в разделе "Повторное вычисление стилей" - 
    "Recalculate Styles". Этот показатель показывает ОБЩЕЕ время обработки стилей, включая 
    обработку CSS, построение CSSOM, рекурсивное вычисление стилей.

    С точки зрения оптимизации работать с построением CSSOM бесполезно - этот процесс, как правило,
    занимате даже меньше времени, чем DNS-запрос.
}

# Компиляция JavaScript
{
    Когда CSSOM построен и CSS обработан, другие ресурсы, например скрипты, продолжают загружаться.
    По окончанию загрузки скрипт обязан быть интерпретирован, скомпилирован, обработан и исполнен.

    Скрипты преобразуются в абстрактное синтаксическое древо - "AST".
    Некоторые браузеры берут Abstract Syntax Tree и передают его в интерпретатор.
    Тот преобразует AST в байт-код и исполняет его в основном потоке.
    Весь этот процесс зовётся компиляцией JavaScript-кода.
}

# Дерево доступности
{
    Браузер также строит "дерево доступности".
    Оно используется устройствами-помощниками для интерпретирования контента.

    Accessssibility Object Model - объектная модель доступности - это семантическая версия DOM.
    Браузер обновляет AOM в тот же момент, когда обновляет DOM.
    Однако AOM  не может быть изменено вспомогательными технологиями.

    Пока AOM не построено - содержимое страницы не доступно для различных голосовых
    помощников, считывателей экрана и т.д.

}