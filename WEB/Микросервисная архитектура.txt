Микросервисная архитектура — это подход, который помогает ускорить разработку продукта,
сделать ее гибкой и управляемой:

Проект из неделимого целого превращается в систему связанных между собой блоков — сервисов.

Концепция этой архитектуры сформировалась только к началу 2010-х.
К 2014 году технологию внедрили такие крупные компании, как Netflix, Amazon и Twitter.
Сегодня микросервисный подход используют гораздо активнее. 

* ОТЛИЧИЯ ОТ "МОНОЛИТНОЙ" АРХИТЕКТУРЫ:
Приложение с микросервисной архитектурой разделено на небольшие (не зависящие друг от друга)
компоненты — микросервисы. У каждого микросервиса своя бизнес-задача: 
Один микросервис управляет каталогом, другой - хранит и обновляет содержимое корзины,
третий отвечает за проведение оплаты заказов и т.д.

* ОСНОВНОЕ ПРЕИМУЩЕСТВО:
Благодаря тому, что части приложения автономны, его, как и любую распределённую систему,
легче развивать и обновлять. Добавление или улучшение отдельных функций никак не влияет
на остальные компоненты. 

Это - главное отличие и преимущество микросервисного приложения от монолитного, в котором
все блоки кода связаны между собой, и даже небольшие изменения хотя бы в одном из них
могут поменять работу всей системы.

* ПОЛНЫЙ СПИСОК ОТЛИЧИЙ:

- СКОРОСТЬ РЕЛИЗОВ
Микросервисные приложения:
Чтобы запустить новые функции или обновить существующие достаточно изменить
один модуль ПО. Это ускоряет разработку и выпуск обновлений.

Монолитное приложение:
Чтобы протестировать ПО и подготовить его к релизу нужно обновить всю систему.
Это требует большего количества времени и может привести к неожиданным проблемам.

- ДИАПАЗОН ТЕХНОЛОГИЙ
Микросервисные приложения:
Каждый микросервис может быть написан на своём языке программирования. При этом каждый
сервис может обладать своим способом хранения данных и необходимыми ему библиотеками.

Монолитное приложение:
Код монолитного приложения — единое целое, поэтому вся команда должна придерживаться уже
выбранных инструментов и методов.

- ПРОЦЕСС РАЗРАБОТКИ
Микросервисные приложения:
Позволяет вести гибкую разработку и при необходимости быстро менять состав команды
или требования к продукту.

Монолитное приложение:
Монолитный подход более требователен к порогу вхождения. Каждому новичку придётся
изучать код системы и её функциональность.

- ОПТИМИЗАЦИЯ ПО
Микросервисные приложения:
Управление ресурсами, инфраструктурой и функциональностью ПО можно доверить 
разным сервисам и оптимизировать каждый из них по отдельности.

Монолитное приложение:
При оптимизации монолитного приложения нужно постоянно учитывать внутренние связи
между его модулями, т.к. обновление хотя бы в одного из них может привести к изменению
всей системы в целом.

- МАСШТАБИРУЕМОСТЬ
Микросервисные приложения:
Масштабируемость сервисов происходит автоматически, в зависимости от нагрузки на каждый из них.
В случае необходимости набора новых сотрудников микросервисы также превосходят монолитное
ПО по скорости их обучения и "втягивания" в процесс разработки.

Монолитное приложение:
Изменение одного блока часто приводит к необходимости масштабировать всю систему целиком.

- ОТКАЗОУСТОЙЧИВОСТЬ
Микросервисные приложения:
Проблемы внутри одного сервиса, как правило, никак не нарушают работу системы в целом
и не приводят к появлению новых ошибок.

Монолитное приложение:
Все элементы монолитного приложения связаны друг с другом напрямую или косвенно.
Потому сбой внутри одного модуля может вызвать полный отказ системы.

* НЕДОСТАТКИ МИКРОСЕРВИСНОГО ПОДХОДА:

- ПОСЛЕДСТВИЯ СБОЯ 
Сбой одного сервиса не приведёт к полному отказу приложения, но любая распределённая система
имеет и другие слабые места: потенциальные проблемы связи её элементов друг с другом, сетевые задержки, 
возможная неконсистентность данных и т.д.

- КОНТРОЛЬ РАСХОДОВ
Вы сэкономите, если будете платить только за те ресурсы, которые потребляют ваши микросервисы, но
должны будете предусмотреть ещё и расходы на внедрение облачных технологий, отдельное развёртывание
каждого нового сервиса, его покрытие отдельными тестами и мониторингами.

- РАБОЧИЙ ПРОЦЕСС
Да, контролировать качество решения отдельных бизнес-задач проще и эффективнее, чем оценивать 
всю систему в целом, но настроить рабочие процессы в большой команде разработчиков не так уж легко.

* ИНСТРУМЕНТЫ ДЛЯ СОЗДАНИЯ МИКРОСЕРВИСОВ:
- Docker
- Kubernetes
- Балансировщик

Первые два пункта ясны - контейниризация и управление контейнерами.

А вот "Балансировщик" - это та самая "деталь", позволяющая такой архитектуре носить звание 
"Более устойчивой к сбоям архитектуры", чем монолитной. 

Балансировщик контролирует нагрузку так, чтобы она распределялась равномерно по облачным
ресурсам. 
