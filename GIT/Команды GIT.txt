* НАЧАЛО РАБОТЫ С GIT:

Создать новый репозиторий:
- git init project-name

Текущее состояние репозитория (изменения, неразрешенные конфликты и тп):
- git status

Клонировать репозиторий с удаленной машины:
- git clone git@bitbucket.org:afiskon/hs-textgen.git

Подключиться к удалённому репозиторию для дальнейших "пушей":
- git remote add remotename git@gitlab.example.ru:repo.git

Создание глобального файла .gitignore:
- git config --global core.excludesfile ~/.gitignore_global

«Упаковка» репозитория для увеличения скорости работы с ним:
- git gc

* РАБОТА С ФАЙЛАМИ:

Добавить конкретный файл в репозиторий:
- git add text.txt

Добавить все файлы в репозиторий:
- git add .

Удалить файл из репозитория:
- git rm text.txt

Удаление неотслеживаемых (untracked) файлов:
- git clean -f

* КОММИТЫ:

Сделать коммит:
- git commit -a -m "Commit description"

Сделать коммит, введя его описание с помощью $EDITOR:
- git commit -a

* ВЕТКИ:

Создать новую ветку (ответвится от текущего состояния):
- git branch some_branch_name

Начать работать с веткой some_branch (уже существующей):
- git checkout -b some_branch origin/some_branch

Переключиться на другую ветку (из тех, с которыми уже работаем):
- git checkout some_branch

Получить список веток, с которыми работаем:
- git branch # звездочкой отмечена текущая ветвь

Просмотреть все существующие ветви:
- git branch -a # | grep something

Удалить бранч (после мержа):
- git branch -d some_branch

Просто удалить бранч (тупиковая ветвь):
- git branch -D some_branch

Удалить бранч из репозитория на сервере:
- git push origin :branch-name

* СЛИЯНИЕ (МЕРЖ) ВЕТВЕЙ В УДАЛЁННЫЙ РЕПОЗИТОРИЙ:

Замержить some_branch в текущую ветку:
- git merge some_branch

Замержить все ветки c локального репозитория на удаленный.
Вместо origin можно указать и имя удалённого репозитория (remotename- см выше):
- git push origin

Аналогично предыдущему, но делается пуш только ветки master:
- git push origin master

Запушить текущую ветку, не вводя целиком ее название:
- git push origin HEAD

* СЛИЯНИЕ (МЕРЖ) ВЕТВЕЙ С ЛОКАЛЬНЫМ РЕПОЗИТОРИЕМ:

Скачать все ветки с origin, но не мержить их в локальный репозиторий:
- git fetch origin

Аналогично предыдущему, но только для одной заданной ветки:
- git fetch origin some_branch

Замержить все ветки с удаленного репозитория на локальный:
- git pull origin

Аналогично предыдущему, но накатывается только ветка master:
- git pull origin master

Накатить текущую ветку, не вводя ее длинное имя:
- git pull origin HEAD

* РАБОТА НАД ОШИБКАМИ:

Откатиться к конкретному коммиту (хэш надо смотреть через «git log»):
- git reset --hard d8578edf8458ce06fbc5bb76a58c5ca4a58c5ca4

Аналогично предыдущему, но файлы на диске остаются без изменений:
- git reset --soft d8578edf8458ce06fbc5bb76a58c5ca4a58c5ca4

Попытаться обратить заданный commit:
- git revert d8578edf8458ce06fbc5bb76a58c5ca4a58c5ca4

Используем vimdiff в качестве программы для разрешения конфликтов (mergetool) по умолчанию:
- git config --global merge.tool vimdiff

Отключить диалог «какой mergetool вы хотели бы использовать»:
- git config --global mergetool.prompt false

Отобразить табы как 4 пробела, например, в «git diff»:
- git config --global core.pager 'less -x4'

Разрешение конфликтов (когда оные возникают в результате мержа):
- git mergetool

* САБМОДУЛИ:

Добавить сабмодуль:
- git submodule add https://github.com/glfw/glfw glfw

Инициализация сабмодулей:
- git submodule init

Обновление сабмодулей, например, если после git pull поменялся коммит, на который смотрит сабмодуль:
- git submodule update

* ПРОВЕРКА ИЗМЕНЕНИЙ:

Посмотреть, кем в последний раз правилась каждая строка файла:
- git blame file.txt

Посмотреть, кто внёс конкретное изменение:
- git blame file.txt | grep 123 (после grep - изменения в файле. В нашем случае добавление цифр 123)

Посмотреть, какие конкретно изменения внёс определённый автор:
- git blame file.txt | grep TZero999 (после grep - имя автора)

История изменений:
- git log

История изменений по конкретному автору:
- git log --author TZero999

История изменений в обратном порядке:
- git log --reverse

История изменений конкретного файла:
- git log file.txt

Аналогично предыдущему, но ещё и с просмотром сделанных изменений:
- git log -p file.txt

История с именами файлов и псевдографическим изображением бранчей:
- git log --stat --graph

Изменения, сделанные в заданном коммите:
- git show d8578edf8458ce06fbc5bb76a58c5ca4a58c5ca4

Просмотр изменений (суммарных, а не всех по очереди, как в «git log»):
- git diff 
Подробности лучше посмотреть в "git diff --help"

Создание тэга:
- git tag some_tag #
за знаком тэгом можно указать хэш коммита

