- Список методов:
1. GET
2. POST
3. PUT
4. PATCH
5. DELETE
6. TRACE
7. CONNECT
8. OPTIONS
9. HEAD

- Краткое описание методов:
1. GET
Запрашивает содержимое указанного ресурса/ начинает какой-либо процесс на сервере.
GET - идемпотентный (Даёт один и тот же результат при повторных обращениях)

В GET могут быть включены параметры, если указать их после "URI" и знака "?"

2. POST
Передаёт пользовательские данные на сервер (текст, файлы и т.д.)
POST - неидемпотентный.

Сервер возвращает 200 (Ok) и сообщение об итоге выполнения запроса в теле ответа. Если был создан ресурс, то сервер
возвращает ответ 201 (Created) с указанием URI нового ресурса в заголовке "Location". 

3. PUT
Применяется для загрузки содержимого запроса на указанный в запросе URI.
Если по заданному URI не существует ресурса - сервер создаёт его и возвращает статус 201 (Created).
Если ресурс был изменён - сервер возвращает 200 (Ok) или 204 (No Content).

Сервер не должен игнорировать некорректные заголовки Content-*. Если какой-то из этих заголовков не распознан/недопустим -
сервер возвращает код ошибки 501 (Not Implemented).

Отличие от POST:
PUT перезаписывает данные по указанному URL. И поэтому он считается идемпотентным. А вот POST данные добавляет к существующим.
Много одинаковых POST-ов будут создавать много новых записей.

4. PATCH
Аналогичен PUT, но применяется только к некому фрагменту ресурса. 

5. DELETE
Удаляет указанный ресурс. 

6. TRACE
Возвращает полученный запрос.
Клиент может проанализировать, какую информацию добавили или изменили промежуточные серверы. 

7. CONNECT
Преобразует соединение запроса в прозрачный TCP/IP-туннель. 
Позволяет содействовать установлению защищённого SSL-соединения через нешифрованный прокси.

8. OPTIONS
Нербходим для определения возможностей веб-сервера/ параметров соединения для конкретного ресурса.
Ответ сервера включает заголовок "Allow" со списком поддерживаемых методов + может включаться информация о поддерживаемых расширениях. 

9. HEAD
Аналогичен GET, но у ответа отсутствует тело. Применяется для менее ресурсоёмкого (чем GET) извлечения метаданных, 
проверки наличия ресурсов (валидации URL). Если кэш устарел HEAD поможет пометить копию ресурса, как устаревшую.